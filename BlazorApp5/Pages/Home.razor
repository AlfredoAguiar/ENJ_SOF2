@page "/"
@using System.ComponentModel.DataAnnotations
@using WebApplication5.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService UserStateService
<div class="container">
    <div class="content @(isSignIn ? "first-content" : "second-content")">
        <div class="first-column">
            @if (isSignIn)
            {
                <h2 class="title title-primary">Bem-vindo!</h2>
                <p class="description description-primary">Para continuar conectado a nós</p>
                <p class="description description-primary">por favor faça o registo com os teus dados pessoais</p>
                <button @onclick="Register" class="btn btn-primary">Registar</button>
            }
            else
            {
                <h2 class="title title-primary">Olá, amigo!</h2>
                <p class="description description-primary">Já tens conta? Então faz login!</p>
                <button @onclick="ToggleView" class="btn btn-primary">Login</button>
            }
        </div>

        <div class="second-column">
            <br /><br /><br /><br />

            @if (isSignIn)
            {
                <h2 class="title title-second">Login</h2>
                <p class="description description-second">Use seus dados para entrar:</p>

                <EditForm Model="signInModel" OnValidSubmit="HandleSignInSubmit" class="form-container">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form">
                        <div class="input-group">
                            <i class="far fa-envelope icon-modify"></i>
                            <InputText @bind-Value="signInModel.Email" placeholder="Email" class="form-input" />
                        </div>

                        <div class="input-group">
                            <i class="fas fa-lock icon-modify"></i>
                            <InputText @bind-Value="signInModel.Password" type="password" placeholder="Password" class="form-input" />
                        </div>

                        @if (!string.IsNullOrEmpty(loginErrorMessage))
                        {
                            <div style="color:red">@loginErrorMessage</div>
                        }

                        <button type="submit" class="btn btn-second">Login</button>
                    </div>
                </EditForm>
            }
            else
            {
                <h2 class="title title-second">Registar Conta</h2>
                <p class="description description-second">Preencha os dados abaixo:</p>

                <EditForm Model="signUpModel" OnValidSubmit="HandleSignUpSubmit" class="form-container">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form">
                        <div class="input-group">
                            <i class="far fa-envelope icon-modify"></i>
                            <InputText @bind-Value="signUpModel.Email" placeholder="Email" class="form-input" />
                        </div>

                        <div class="input-group">
                            <i class="fas fa-lock icon-modify"></i>
                            <InputText @bind-Value="signUpModel.Password" type="password" placeholder="Password" class="form-input" />
                        </div>

                        <button type="submit" class="btn btn-second">Sign Up</button>
                    </div>
                    
                </EditForm>
              
            }
            @if (ShowLoginSuccessPopup)
            {
            <div class="toast toast-success">Login realizado com sucesso!</div>
            }
        </div>
      
    </div>
</div>

@code {
    private bool ShowLoginSuccessPopup = false;
    private bool isSignIn = true;

    private class SignUpModel
    {
        [Required(ErrorMessage = "Email é obrigatório.")]
        [EmailAddress(ErrorMessage = "Formato de email inválido.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Senha é obrigatória.")]
        [MinLength(6, ErrorMessage = "A senha deve ter pelo menos 6 caracteres.")]
        public string Password { get; set; }
    }

    private class SignInModel
    {
        [Required] public string Email { get; set; }

        [Required] public string Password { get; set; }
    }

    private SignUpModel signUpModel = new SignUpModel();
    private SignInModel signInModel = new SignInModel();
    private string loginErrorMessage = string.Empty;

    private void ToggleView()
    {
        isSignIn = !isSignIn;
    }
    
    private void Register()
    {
        NavigationManager.NavigateTo("/login");
    }

    

    private void HandleSignUpSubmit()
    {
        Console.WriteLine($"Registration: {signUpModel.Email}");
    }

    
    private async Task HandleSignInSubmit()
    {
        loginErrorMessage = string.Empty;

        try
        {
            var email = Uri.EscapeDataString(signInModel.Email);
            var password = Uri.EscapeDataString(signInModel.Password);
            var url = $"http://localhost:5189/api/Utilizadore";

            var response = await Http.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var users = await response.Content.ReadFromJsonAsync<List<UtilizadoreDto>>();
                var user = users?.FirstOrDefault(u =>
                    u.Email == signInModel.Email && u.Senha == signInModel.Password);

                if (user != null)
                {
                    UserStateService.UserId = user.Id;

                    ShowLoginSuccessPopup = true;
                    StateHasChanged();
                    await Task.Delay(3000);
                
                    NavigationManager.NavigateTo("/main");
                }
                else
                {
                    loginErrorMessage = "Email ou senha incorretos.";
                }
            }
            else
            {
                loginErrorMessage = "Erro na requisição.";
            }
        }
        catch (Exception ex)
        {
            loginErrorMessage = $"Erro: {ex.Message}";
        }
    }


}