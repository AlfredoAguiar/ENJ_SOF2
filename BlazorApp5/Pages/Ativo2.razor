@page "/ativo2"
@using System.Globalization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link href="css/main.css" rel="stylesheet" />
<div class="navbar">
    <a href="/main" class="logo">Ativos Financeiros</a>
    <div class="nav-links">
        <NavLink href="/main" class="nav-link">Home</NavLink>
        <div class="dropdown" @onclick="ToggleDropdown" @onmouseleave="CloseDropdown">
            <NavLink class="nav-link">
                Ativos Financeiros
                <span class="dropdown-arrow" style="@GetArrowRotation()"></span>
            </NavLink>
            @if (isDropdownVisible)
            {
                <div class="dropdown-content">
                    <NavLink href="/ativo" class="dropdown-link">Depósitos a Prazo</NavLink>
                    <NavLink href="/ativo2" class="dropdown-link">Fundos de Investimento</NavLink>
                    <NavLink href="/ativo3" class="dropdown-link">Imóveis para Arrendamento</NavLink>
                </div>
            }
        </div>
        <NavLink href="/services" class="nav-link">Services</NavLink>
        <NavLink href="/dados" class="nav-link">Dados Pessoais</NavLink>
        <NavLink href="/" class="nav-link sair-button" @onclick="Logout">Sair</NavLink>
    </div>
</div>

<div class="content-container">
    <div class="title-container">
        <h1 class="page-title">Gestão de Fundos de Investimento</h1>
        <button class="add-button" @onclick="ShowAddModal">
            <i class="fas fa-plus"></i> Adicionar Fundo
        </button>
    </div>
    <br/>
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Montante Investido</th>
                    <th>Duração (Meses)</th>
                    <th>Taxa de Juros Padrão</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in fundos)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Nome</td>
                        <td>@item.MontanteInvestido.ToString("C", new CultureInfo("pt-PT"))</td>
                        <td>@item.DuracaoMeses</td>
                        <td>@item.TaxaJurosPadrao.ToString("P")</td>
                        <td>
                            <div class="button-group">
                                <button class="edit-button" @onclick="() => ShowEditModal(item)">Editar</button>
                                <button class="delete-button" @onclick="() => ShowDeleteModal(item.Id)">Apagar</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal de Confirmação de Apagar -->
<div class="modal @modalVisibility">
    <div class="modal-content">
        <span class="close-button" @onclick="HideDeleteModal">&times;</span>
        <p>Tem certeza de que deseja apagar este fundo?</p>
        <div class="modal-buttons">
            <button class="confirm-button" @onclick="ConfirmDelete">Confirmar</button>
            <button class="cancel-button" @onclick="HideDeleteModal">Cancelar</button>
        </div>
    </div>
</div>

<!-- Modal Adicionar -->
<div class="modal @addModalVisibility">
    <div class="modal-content">
        <span class="close-button" @onclick="HideAddModal">&times;</span>
        <h2>Adicionar Novo Fundo</h2>
        <br/>
        <form @onsubmit="AddFundo">
            <label>
                Nome:
                <input type="text" @bind="newFundo.Nome" required />
            </label>
            <label>
                Montante Investido:
                <input type="number" @bind="newFundo.MontanteInvestido" required />
            </label>
            <label>
                Duração (Meses):
                <input type="number" @bind="newFundo.DuracaoMeses" required />
            </label>
            <label>
                Taxa de Juros Padrão (%):
                <input type="number" step="0.01" @bind="newFundo.TaxaJurosPadrao" required />
            </label>
            <div class="modal-buttons">
                <button type="submit" class="confirm-button">Adicionar</button>
                <button type="button" class="cancel-button" @onclick="HideAddModal">Cancelar</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Editar -->
<div class="modal @editModalVisibility">
    <div class="modal-content">
        <span class="close-button" @onclick="HideEditModal">&times;</span>
        <h2>Editar Fundo</h2>
        <br/>
        <form @onsubmit="SaveEdit">
            <label>
                Nome:
                <input type="text" @bind="editFundo.Nome" required />
            </label>
            <label>
                Montante Investido:
                <input type="number" @bind="editFundo.MontanteInvestido" required />
            </label>
            <label>
                Duração (Meses):
                <input type="number" @bind="editFundo.DuracaoMeses" required />
            </label>
            <label>
                Taxa de Juros Padrão (%):
                <input type="number" step="0.01" @bind="editFundo.TaxaJurosPadrao" required />
            </label>
            <div class="modal-buttons">
                <button type="submit" class="confirm-button">Salvar</button>
                <button type="button" class="cancel-button" @onclick="HideEditModal">Cancelar</button>
            </div>
        </form>
    </div>
</div>

@code {
    private bool isDropdownVisible = false;
    private bool isModalVisible = false;
    private bool isAddModalVisible = false;
    private bool isEditModalVisible = false;
    private int itemToDeleteId = -1;

    private List<FundoInvestimento> fundos = new List<FundoInvestimento>
    {
        new FundoInvestimento { Id = 1, Nome = "Fundo A", MontanteInvestido = 10000.00m, DuracaoMeses = 12, TaxaJurosPadrao = 0.05m },
        new FundoInvestimento { Id = 2, Nome = "Fundo B", MontanteInvestido = 15000.00m, DuracaoMeses = 24, TaxaJurosPadrao = 0.04m },
        new FundoInvestimento { Id = 3, Nome = "Fundo C", MontanteInvestido = 20000.00m, DuracaoMeses = 36, TaxaJurosPadrao = 0.03m }
    };

    private FundoInvestimento newFundo = new FundoInvestimento();
    private FundoInvestimento editFundo = new FundoInvestimento();

    private void ToggleDropdown() => isDropdownVisible = !isDropdownVisible;
    private void CloseDropdown() => isDropdownVisible = false;
    private string GetArrowRotation() => isDropdownVisible ? "transform: rotate(225deg);" : "transform: rotate(45deg);";

    private void ShowDeleteModal(int id)
    {
        itemToDeleteId = id;
        isModalVisible = true;
    }

    private void HideDeleteModal() => isModalVisible = false;

    private void ConfirmDelete()
    {
        fundos.RemoveAll(f => f.Id == itemToDeleteId);
        HideDeleteModal();
    }

    private void ShowAddModal()
    {
        isAddModalVisible = true;
        newFundo = new FundoInvestimento();
    }

    private void HideAddModal() => isAddModalVisible = false;

    private void AddFundo()
    {
        newFundo.Id = fundos.Count + 1;
        fundos.Add(newFundo);
        HideAddModal();
    }

    private void ShowEditModal(FundoInvestimento fundo)
    {
        editFundo = new FundoInvestimento
        {
            Id = fundo.Id,
            Nome = fundo.Nome,
            MontanteInvestido = fundo.MontanteInvestido,
            DuracaoMeses = fundo.DuracaoMeses,
            TaxaJurosPadrao = fundo.TaxaJurosPadrao
        };
        isEditModalVisible = true;
    }

    private void HideEditModal() => isEditModalVisible = false;

    private void SaveEdit()
    {
        var fundo = fundos.FirstOrDefault(f => f.Id == editFundo.Id);
        if (fundo != null)
        {
            fundo.Nome = editFundo.Nome;
            fundo.MontanteInvestido = editFundo.MontanteInvestido;
            fundo.DuracaoMeses = editFundo.DuracaoMeses;
            fundo.TaxaJurosPadrao = editFundo.TaxaJurosPadrao;
        }
        HideEditModal();
    }

    private string modalVisibility => isModalVisible ? "visible" : "";
    private string addModalVisibility => isAddModalVisible ? "visible" : "";
    private string editModalVisibility => isEditModalVisible ? "visible" : "";

    private class FundoInvestimento
    {
        public int Id { get; set; }
        public string Nome { get; set; }
        public decimal MontanteInvestido { get; set; }
        public int DuracaoMeses { get; set; }
        public decimal TaxaJurosPadrao { get; set; }
    }

    private void Logout()
    {
        // Logic for logging out (if needed)
        // Redirect to the homepage
        Navigation.NavigateTo("http://localhost:5228");
    }
}
