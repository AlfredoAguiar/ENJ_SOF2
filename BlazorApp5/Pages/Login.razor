@page "/login"
@using System.ComponentModel.DataAnnotations
@using WebApplication5.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="container">
    <div class="content first-content">
        <!-- Coluna para direcionamento ao login -->
        <div class="first-column">
            <h2 class="title title-primary">Já tem uma conta?</h2>
            <p class="description description-primary">
                Se já estiver registado, basta efetuar o login.
            </p>
            <button @onclick="BackToLogin" class="btn btn-primary">Login</button>
        </div>

        <!-- Coluna de registro -->
        <div class="second-column">
            <h2 class="title title-second">Faça o seu Registro</h2>
            <p class="description description-second">
                Preencha seus dados para se registar
            </p>
            <EditForm Model="registerModel" OnValidSubmit="HandleRegistration" class="form-container">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form">
                    <div class="input-group">
                        <i class="far fa-envelope icon-modify"></i>
                        <InputText @bind-Value="registerModel.Email" placeholder="Email" class="form-input" />
                    </div>

                    <div class="input-group">
                        <i class="fas fa-user icon-modify"></i>
                        <InputText @bind-Value="registerModel.Name" placeholder="Nome" class="form-input" />
                    </div>

                    <div class="input-group">
                        <i class="fas fa-lock icon-modify"></i>
                        <InputText @bind-Value="registerModel.Password" type="password" placeholder="Password" class="form-input" />
                    </div>

                    <div class="input-group">
                        <i class="fas fa-lock icon-modify"></i>
                        <InputText @bind-Value="registerModel.ConfirmPassword" type="password" placeholder="Confirmar Password" class="form-input" />
                    </div>

                    <button type="submit" class="btn btn-second">Registrar</button>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="error" style="color: red;">@ErrorMessage</div>
            }

            @if (ShowSuccessPopup)
            {
                <div class="toast toast-success">Registro realizado com sucesso!</div>
            }
        </div>
    </div>
</div>

@code {
    public class RegisterModel
    {
        [Required(ErrorMessage = "O nome é obrigatório.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "O email é obrigatório.")]
        [EmailAddress(ErrorMessage = "Endereço de email inválido.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "A senha é obrigatória.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "A confirmação de senha é obrigatória.")]
        [Compare("Password", ErrorMessage = "As senhas devem coincidir.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private RegisterModel registerModel = new RegisterModel();
    private string ErrorMessage = string.Empty;
    private bool ShowSuccessPopup = false;

    private void BackToLogin()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleRegistration()
    {
        ErrorMessage = "";
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            ErrorMessage = "As senhas não coincidem.";
            return;
        }

        var newUser = new UtilizadoreDto
        {
            Id = Guid.NewGuid(),
            Nome = registerModel.Name,
            Email = registerModel.Email,
            Senha = registerModel.Password, // texto puro
            Cargo = "Utilizador",
            PermissaoId = Guid.Parse("8a14aeb8-aaf8-4fcd-8d8a-a5cd1e5ec0fd")
        };


        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5189/api/Utilizadore", newUser);

            if (response.IsSuccessStatusCode)
            {
                ShowSuccessPopup = true;
                StateHasChanged();
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/main");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Erro ao registrar usuário:";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exceção: {ex.Message}";
        }
    }
}
