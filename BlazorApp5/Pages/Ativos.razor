@page "/ativo"
@using System.Globalization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link href="css/main.css" rel="stylesheet" />
<div class="navbar">
    <a href="/main" class="logo">Ativos Financeiros</a>
    <div class="nav-links">
        <NavLink href="/main" class="nav-link">Home</NavLink>
        <div class="dropdown" @onclick="ToggleDropdown" @onmouseleave="CloseDropdown">
            <NavLink class="nav-link">
                Ativos Financeiros
                <span class="dropdown-arrow" style="@GetArrowRotation()"></span>
            </NavLink>
            @if (isDropdownVisible)
            {
                <div class="dropdown-content">
                    <NavLink href="/ativo" class="dropdown-link">Depósitos a Prazo</NavLink>
                    <NavLink href="/ativo2" class="dropdown-link">Renda Variável</NavLink>
                    <NavLink href="/ativo3" class="dropdown-link">Fundos Imobiliários</NavLink>
                </div>
            }
        </div>
        <NavLink href="/services" class="nav-link">Services</NavLink>
        <NavLink href="/dados" class="nav-link">Dados Pessoais</NavLink>
        <NavLink href="/" class="nav-link sair-button" @onclick="Logout">Sair</NavLink>
    </div>
</div>

<div class="content-container">
    <div class="title-container">
        <h1 class="page-title">Gestão de Depósitos a Prazo</h1>
        <button class="add-button" @onclick="ShowAddModal">
            <i class="fas fa-plus"></i> Adicionar Depósito
        </button>
    </div>
    <br/>
    <div class="table-container">
        <table>
            <thead>
            <tr>
                <th>ID</th>
                <th>Deposito ID</th>
                <th>Banco</th>
                <th>Montante</th>
                <th>Duração (Meses)</th>
                <th>Taxa Juros Anual</th>
                <th>Titular</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in deposits)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.DepositoId</td>
                    <td>@item.Banco</td>
                    <td>@item.Montante.ToString("C", new CultureInfo("pt-PT"))</td>
                    <td>@item.DuracaoMeses</td>
                    <td>@item.TaxaJurosAnual.ToString("P")</td>
                    <td>@item.Titular</td>
                    <td>
                        <div class="button-group">
                            <button class="edit-button" @onclick="() => ShowEditModal(item)">Editar</button>
                            <button class="delete-button" @onclick="() => ShowDeleteModal(item.Id)">Apagar</button>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<div class="modal @modalVisibility">
    <div class="modal-content">
        <span class="close-button" @onclick="HideDeleteModal">&times;</span>
        <p>Tem certeza de que deseja apagar este depósito?</p>
        <div class="modal-buttons">
            <button class="confirm-button" @onclick="ConfirmDelete">Confirmar</button>
            <button class="cancel-button" @onclick="HideDeleteModal">Cancelar</button>
        </div>
    </div>
</div>

<!-- Modal Structure for Adding Deposit -->
<div class="modal @addModalVisibility">
    <div class="modal-content">
        <span class="close-button" @onclick="HideAddModal">&times;</span>
        <h2>Adicionar Novo Depósito</h2>
        <br/>
        <form @onsubmit="AddDeposit">
            <label>
                Banco:
                <input type="text" @bind="newDeposit.Banco" required />
            </label>
            <label>
                Montante:
                <input type="number" @bind="newDeposit.Montante" required />
            </label>
            <label>
                Duração (Meses):
                <input type="number" @bind="newDeposit.DuracaoMeses" required />
            </label>
            <label>
                Taxa Juros Anual (%):
                <input type="number" step="0.01" @bind="newDeposit.TaxaJurosAnual" required />
            </label>
            <label>
                Titular:
                <input type="text" @bind="newDeposit.Titular" required />
            </label>
            <div class="modal-buttons">
                <button type="submit" class="confirm-button">Adicionar</button>
                <button type="button" class="cancel-button" @onclick="HideAddModal">Cancelar</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Structure for Edit Deposit -->
<div class="modal @editModalVisibility">
    <div class="modal-content">
        <span class="close-button" @onclick="HideEditModal">&times;</span>
        <h2>Editar Depósito</h2>
        <br/>
        <form @onsubmit="SaveEdit">
            <label>
                Banco:
                <input type="text" @bind="editDeposit.Banco" required />
            </label>
            <label>
                Montante:
                <input type="number" @bind="editDeposit.Montante" required />
            </label>
            <label>
                Duração (Meses):
                <input type="number" @bind="editDeposit.DuracaoMeses" required />
            </label>
            <label>
                Taxa Juros Anual (%):
                <input type="number" step="0.01" @bind="editDeposit.TaxaJurosAnual" required />
            </label>
            <label>
                Titular:
                <input type="text" @bind="editDeposit.Titular" required />
            </label>
            <div class="modal-buttons">
                <button type="submit" class="confirm-button">Salvar</button>
                <button type="button" class="cancel-button" @onclick="HideEditModal">Cancelar</button>
            </div>
        </form>
    </div>
</div>

@code {
    private bool isDropdownVisible = false;
    private bool isModalVisible = false;
    private bool isAddModalVisible = false;
    private bool isEditModalVisible = false;
    private int itemToDeleteId = -1;

    private List<Deposit> deposits = new List<Deposit>
    {
        new Deposit { Id = 1, DepositoId = 101, Banco = "Banco A", Montante = 1000.00m, DuracaoMeses = 12, TaxaJurosAnual = 0.05m, Titular = "João Silva" },
        new Deposit { Id = 2, DepositoId = 102, Banco = "Banco B", Montante = 1500.00m, DuracaoMeses = 24, TaxaJurosAnual = 0.04m, Titular = "Maria Oliveira" },
        new Deposit { Id = 3, DepositoId = 103, Banco = "Banco C", Montante = 2000.00m, DuracaoMeses = 36, TaxaJurosAnual = 0.03m, Titular = "Pedro Almeida" }
    };

    private Deposit newDeposit = new Deposit();
    private Deposit editDeposit = new Deposit();

    private void ToggleDropdown()
    {
        isDropdownVisible = !isDropdownVisible;
    }

    private void CloseDropdown()
    {
        isDropdownVisible = false;
    }

    private string GetArrowRotation()
    {
        return isDropdownVisible ? "transform: rotate(225deg);" : "transform: rotate(45deg);";
    }

    private void ShowDeleteModal(int id)
    {
        itemToDeleteId = id;
        isModalVisible = true;
    }

    private void HideDeleteModal()
    {
        itemToDeleteId = -1;
        isModalVisible = false;
    }

    private void ConfirmDelete()
    {
        // Simula a exclusão sem remover o item da lista
        HideDeleteModal();
    }

    private void ShowAddModal()
    {
        isAddModalVisible = true;
        newDeposit = new Deposit(); // Reset new deposit fields
    }

    private void HideAddModal()
    {
        isAddModalVisible = false;
    }

    private void AddDeposit()
    {
        if (!string.IsNullOrEmpty(newDeposit.Banco) && newDeposit.Montante > 0 && newDeposit.DuracaoMeses > 0)
        {
            newDeposit.Id = deposits.Count + 1; // Assign a new ID
            newDeposit.DepositoId = 100 + newDeposit.Id; // Assign a new DepositoId
            deposits.Add(newDeposit);
            HideAddModal();
        }
    }

    private void ShowEditModal(Deposit deposit)
    {
        editDeposit = new Deposit
        {
            Id = deposit.Id,
            DepositoId = deposit.DepositoId,
            Banco = deposit.Banco,
            Montante = deposit.Montante,
            DuracaoMeses = deposit.DuracaoMeses,
            TaxaJurosAnual = deposit.TaxaJurosAnual,
            Titular = deposit.Titular
        };
        isEditModalVisible = true;
    }

    private void HideEditModal()
    {
        isEditModalVisible = false;
    }

    private void SaveEdit()
    {
        var deposit = deposits.FirstOrDefault(d => d.Id == editDeposit.Id);
        if (deposit != null)
        {
            deposit.Banco = editDeposit.Banco;
            deposit.Montante = editDeposit.Montante;
            deposit.DuracaoMeses = editDeposit.DuracaoMeses;
            deposit.TaxaJurosAnual = editDeposit.TaxaJurosAnual;
            deposit.Titular = editDeposit.Titular;
        }
        HideEditModal();
    }

    private string modalVisibility => isModalVisible ? "visible" : "";
    private string addModalVisibility => isAddModalVisible ? "visible" : "";
    private string editModalVisibility => isEditModalVisible ? "visible" : "";

    private class Deposit
    {
        public int Id { get; set; }
        public int DepositoId { get; set; }
        public string Banco { get; set; }
        public decimal Montante { get; set; }
        public int DuracaoMeses { get; set; }
        public decimal TaxaJurosAnual { get; set; }
        public string Titular { get; set; }
    }

    private void Logout()
    {
        // Logic for logging out (if needed)
        // Redirect to the homepage
        Navigation.NavigateTo("http://localhost:5228");
    }
}
