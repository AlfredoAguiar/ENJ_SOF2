@page "/profile/change-password"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using WebApplication5.DTO
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService UserStateService

<div class="app-container">
    <!-- Sidebar Navigation -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Gestão Ativos</h2>
        </div>
        <nav class="sidebar-nav">
            @if (userRole == "Utilizador")
            {
                <!-- Regular Users: Dashboard, Portfolio, Transactions -->
                <a href="/main" class="nav-item @(NavigationManager.Uri.EndsWith("/main") ? "active" : "")">
                    <div class="nav-icon dashboard-nav-icon"></div>
                    <span>Dashboard</span>
                </a>
                <a href="/portfolio" class="nav-item @(NavigationManager.Uri.EndsWith("/portfolio") ? "active" : "")">
                    <div class="nav-icon portfolio-nav-icon"></div>
                    <span>Carteira</span>
                </a>
                <a href="/transactions" class="nav-item @(NavigationManager.Uri.EndsWith("/transactions") ? "active" : "")">
                    <div class="nav-icon transactions-nav-icon"></div>
                    <span>Transações</span>
                </a>
            }
            else if (userRole == "GestorUtilizadores")
            {
                <!-- Asset Managers: Dashboard, Portfolio, Transactions, Reports -->
                <a href="/main" class="nav-item @(NavigationManager.Uri.EndsWith("/main") ? "active" : "")">
                    <div class="nav-icon dashboard-nav-icon"></div>
                    <span>Dashboard</span>
                </a>
                <a href="/portfolio" class="nav-item @(NavigationManager.Uri.EndsWith("/portfolio") ? "active" : "")">
                    <div class="nav-icon portfolio-nav-icon"></div>
                    <span>Carteira</span>
                </a>
                <a href="/transactions" class="nav-item @(NavigationManager.Uri.EndsWith("/transactions") ? "active" : "")">
                    <div class="nav-icon transactions-nav-icon"></div>
                    <span>Transações</span>
                </a>
                <a href="/reports" class="nav-item @(NavigationManager.Uri.EndsWith("/reports") ? "active" : "")">
                    <div class="nav-icon reports-nav-icon"></div>
                    <span>Relatórios</span>
                </a>
            }
            else if (userRole == "Administrador")
            {
                <!-- Administrators: All links (assuming "Administrador" has all permissions) -->
                <a href="/main" class="nav-item @(NavigationManager.Uri.EndsWith("/main") ? "active" : "")">
                    <div class="nav-icon dashboard-nav-icon"></div>
                    <span>Dashboard</span>
                </a>
                <a href="/portfolio" class="nav-item @(NavigationManager.Uri.EndsWith("/portfolio") ? "active" : "")">
                    <div class="nav-icon portfolio-nav-icon"></div>
                    <span>Carteira</span>
                </a>
                <a href="/transactions" class="nav-item @(NavigationManager.Uri.EndsWith("/transactions") ? "active" : "")">
                    <div class="nav-icon transactions-nav-icon"></div>
                    <span>Transações</span>
                </a>
                <a href="/reports" class="nav-item @(NavigationManager.Uri.EndsWith("/reports") ? "active" : "")">
                    <div class="nav-icon reports-nav-icon"></div>
                    <span>Relatórios</span>
                </a>
                <!-- Add other admin-specific links here if any, e.g., Users Management -->
                <a href="/users" class="nav-item @(NavigationManager.Uri.EndsWith("/users") ? "active" : "")">
                    <div class="nav-icon users-nav-icon"></div>
                    <span>Gestão de Utilizadores</span>
                </a>
            }
        </nav>
        <div class="sidebar-footer">
            <a href="javascript:void(0)" @onclick="Logout" class="nav-item logout">
                <div class="nav-icon logout-nav-icon"></div>
                <span>Sair</span>
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Top Header with Breadcrumbs -->
        <div class="page-header">
            <div class="breadcrumbs">
                <a href="/main">Dashboard</a>
                <span class="separator">/</span>
                <a href="/profile">Meu Perfil</a>
                <span class="separator">/</span>
                <span class="current">Alterar Senha</span>
            </div>
            <div class="user-profile">
                <span class="user-greeting">Olá, <strong>@userName</strong></span>
                <button class="user-menu-button" @onclick="ToggleUserMenu">
                    <div class="avatar">@userInitials</div>
                    @if (showUserMenu)
                    {
                        <div class="user-menu">
                            <a href="/profile" class="user-menu-item">Meu Perfil</a>
                            <a href="javascript:void(0)" @onclick="Logout" class="user-menu-item logout">Sair</a>
                        </div>
                    }
                </button>
            </div>
        </div>

        <!-- Page Title -->
        <div class="page-title-actions">
            <h1>Alterar Senha</h1>
            <div class="actions">
                <button class="action-button" @onclick="CancelPasswordChange" disabled="@isChangingPassword">
                    <span class="action-icon cancel-icon"></span>
                    Cancelar
                </button>
            </div>
        </div>

        <!-- Change Password Form -->
        <div class="dashboard-section">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert-error">
                    <span class="alert-icon">!</span>
                    <span>@errorMessage</span>
                </div>
            }

            @if (showSuccessMessage)
            {
                <div class="success-message">
                    <div class="success-icon"></div>
                    <div class="success-content">
                        <h3>Senha Alterada com Sucesso</h3>
                        <p>A sua senha foi alterada com sucesso. Você será redirecionado para a página de perfil.</p>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="@passwordModel" OnValidSubmit="ChangePasswordAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="password-form">
                        <div class="form-group">
                            <label for="currentPassword">Senha Atual</label>
                            <InputText type="password" id="currentPassword" @bind-Value="passwordModel.CurrentPassword" class="form-control" disabled="@isChangingPassword" />
                            <ValidationMessage For="@(() => passwordModel.CurrentPassword)" class="validation-message" />
                        </div>
                        
                        <div class="form-group">
                            <label for="newPassword">Nova Senha</label>
                            <InputText type="password" id="newPassword" @bind-Value="passwordModel.NewPassword" class="form-control" disabled="@isChangingPassword" />
                            <ValidationMessage For="@(() => passwordModel.NewPassword)" class="validation-message" />
                            <div class="password-strength">
                                <div class="strength-meter">
                                    <div class="strength-bar @GetPasswordStrengthClass()"></div>
                                </div>
                                <span class="strength-text">@GetPasswordStrengthText()</span>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="confirmPassword">Confirmar Nova Senha</label>
                            <InputText type="password" id="confirmPassword" @bind-Value="passwordModel.ConfirmPassword" class="form-control" disabled="@isChangingPassword" />
                            <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" class="validation-message" />
                        </div>
                        
                        <div class="password-requirements">
                            <h4>Requisitos de Senha</h4>
                            <ul>
                                <li class="@(HasMinLength ? "requirement-met" : "")">Pelo menos 8 caracteres</li>
                                <li class="@(HasUpperCase ? "requirement-met" : "")">Pelo menos uma letra maiúscula</li>
                                <li class="@(HasLowerCase ? "requirement-met" : "")">Pelo menos uma letra minúscula</li>
                                <li class="@(HasDigit ? "requirement-met" : "")">Pelo menos um número</li>
                                <li class="@(HasSpecialChar ? "requirement-met" : "")">Pelo menos um caractere especial</li>
                            </ul>
                        </div>
                        
                        <div class="form-actions">
                            <button type="submit" class="save-button" disabled="@(!IsPasswordValid || isChangingPassword)">
                                @if (isChangingPassword)
                                {
                                    <span>Alterando...</span>
                                }
                                else
                                {
                                    <span>Alterar Senha</span>
                                }
                            </button>
                            <button type="button" class="cancel-button" @onclick="CancelPasswordChange" disabled="@isChangingPassword">Cancelar</button>
                        </div>
                    </div>
                </EditForm>
                
                <div class="info-note">
                    <div class="info-icon"></div>
                    <div class="info-content">
                        <h3>Dica de Segurança</h3>
                        <p>Utilize senhas diferentes para cada serviço e evite reutilizar senhas antigas. Considere usar um gestor de senhas para maior segurança.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    /* Global App Container */
    .app-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8fafc;
        color: #334155;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 250px;
        background: linear-gradient(180deg, #1e293b 0%, #0f172a 100%);
        color: white;
        padding: 20px;
        display: flex;
        flex-direction: column;
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        height: 100vh;
    }

    .sidebar-header {
        margin-bottom: 30px;
        text-align: center;
    }

    .sidebar-header h2 {
        font-size: 24px;
        font-weight: 700;
        color: #e2e8f0;
    }

    .sidebar-nav {
        flex-grow: 1;
    }

    .nav-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        margin-bottom: 10px;
        border-radius: 8px;
        color: #cbd5e1;
        text-decoration: none;
        transition: background-color 0.2s, color 0.2s;
    }

    .nav-item:hover {
        background-color: #334155;
        color: white;
    }

    .nav-item.active {
        background-color: #3b82f6;
        color: white;
        font-weight: 600;
        box-shadow: 0 4px 10px rgba(59, 130, 246, 0.3);
    }

    .nav-icon {
        width: 24px;
        height: 24px;
        margin-right: 12px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        filter: invert(1); /* Adjust for light icons on dark background */
    }

    /* Specific icons - replace with actual SVG/icon font if available */
    .dashboard-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>'); }
    .portfolio-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 12V8H6a2 2 0 0 1-2-2c0-1.1.9-2 2-2h12v4"></path><path d="M4 6v12c0 1.1.9 2 2 2h14v-4"></path><path d="M18 12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2v-4h-2Z"></path></svg>'); }
    .transactions-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>'); }
    .reports-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>'); }
    .logout-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>'); }
    .users-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>'); }


    .sidebar-footer {
        margin-top: auto; /* Pushes the footer to the bottom */
        padding-top: 20px;
        border-top: 1px solid #334155;
    }

    /* Main Content Area */
    .main-content {
        flex-grow: 1;
        padding: 20px;
        overflow-y: auto; /* Allows scrolling within the main content */
    }

    /* Page Header */
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
    }

    .breadcrumbs {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #64748b;
    }

    .breadcrumbs a {
        color: #3b82f6;
        text-decoration: none;
        font-weight: 500;
    }

    .breadcrumbs a:hover {
        text-decoration: underline;
    }

    .breadcrumbs .separator {
        margin: 0 8px;
        color: #cbd5e1;
    }

    .breadcrumbs .current {
        font-weight: 600;
        color: #1e293b;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 12px;
        position: relative;
    }

    .user-greeting {
        font-size: 16px;
        color: #64748b;
    }

    .avatar {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 18px;
        cursor: pointer;
    }

    .user-menu {
        position: absolute;
        right: 0;
        top: 60px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 200px;
        z-index: 100;
        overflow: hidden;
    }

    .user-menu-item {
        display: block;
        padding: 12px 16px;
        color: #334155;
        text-decoration: none;
        border-bottom: 1px solid #e2e8f0;
    }

    .user-menu-item:hover {
        background-color: #f8fafc;
    }

    .user-menu-item.logout {
        color: #e53e3e;
    }

    /* Page Title and Actions */
    .page-title-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
    }

    .page-title-actions h1 {
        font-size: 32px;
        font-weight: 700;
        color: #1e293b;
        margin: 0;
    }

    .actions {
        display: flex;
        gap: 12px;
    }

    .action-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 10px 18px;
        border-radius: 6px;
        font-size: 15px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        text-decoration: none;
        border: none;
        background: #f1f5f9;
        color: #475569;
        border: 1px solid #e2e8f0;
    }

    .action-button:hover:not(:disabled) {
        background: #e2e8f0;
    }

    .action-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .action-icon {
        width: 20px;
        height: 20px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
    }

    .cancel-icon {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>');
    }

    /* Dashboard Section (for form container) */
    .dashboard-section {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 24px;
        overflow: hidden;
        border: 1px solid #e5e7eb;
        padding: 28px; /* Added padding for the form content */
    }

    /* Alert Messages */
    .alert-error {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 1px solid #f1b0b7;
        border-left: 4px solid #dc3545;
        color: #721c24;
        padding: 16px 20px;
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.15);
        display: flex;
        align-items: center;
    }

    .alert-icon {
        font-size: 18px;
        font-weight: bold;
        margin-right: 12px;
        min-width: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        flex-shrink: 0;
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border: 2px solid rgba(220, 53, 69, 0.2);
    }

    .alert-error span:not(.alert-icon) {
        font-weight: 500;
        font-size: 14px;
        line-height: 1.4;
        flex: 1;
    }

    /* Success Message */
    .success-message {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 1px solid #b8dabc;
        border-left: 4px solid #28a745;
        color: #155724;
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.15);
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .success-icon {
        width: 40px;
        height: 40px;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-8.5"></path><polyline points="22 4 12 14 9 11"></polyline></svg>');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        filter: invert(1) sepia(1) saturate(5) hue-rotate(80deg) brightness(0.8); /* Green tint */
        flex-shrink: 0;
    }

    .success-content h3 {
        margin: 0 0 8px 0;
        font-size: 1.125rem;
        font-weight: 700;
        color: #155724;
    }

    .success-content p {
        margin: 0;
        font-size: 0.9375rem;
        color: #155724;
    }

    /* Password Form */
    .password-form {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .form-group label {
        font-weight: 600;
        color: #475569;
        font-size: 14px;
    }

    .form-control {
        padding: 12px 16px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 15px;
        transition: border-color 0.2s;
    }

    .form-control:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-control:disabled {
        background: #f8fafc;
        color: #64748b;
    }

    .validation-message {
        color: #dc2626;
        font-size: 13px;
        margin-top: 4px;
    }

    /* Password Strength */
    .password-strength {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 8px;
    }

    .strength-meter {
        flex-grow: 1;
        height: 8px;
        background-color: #e2e8f0;
        border-radius: 4px;
        overflow: hidden;
    }

    .strength-bar {
        height: 100%;
        width: 0%;
        border-radius: 4px;
        transition: width 0.3s ease-in-out, background-color 0.3s ease-in-out;
    }

    .strength-empty { background-color: transparent; width: 0%; }
    .strength-weak { background-color: #ef4444; width: 25%; }
    .strength-medium { background-color: #f59e0b; width: 50%; }
    .strength-good { background-color: #3b82f6; width: 75%; }
    .strength-strong { background-color: #16a34a; width: 100%; }

    .strength-text {
        font-size: 13px;
        font-weight: 500;
        color: #64748b;
        min-width: 80px;
        text-align: right;
    }

    /* Password Requirements */
    .password-requirements {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 16px;
    }

    .password-requirements h4 {
        font-size: 15px;
        font-weight: 600;
        color: #1e293b;
        margin-top: 0;
        margin-bottom: 12px;
    }

    .password-requirements ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .password-requirements li {
        font-size: 14px;
        color: #64748b;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .password-requirements li:last-child {
        margin-bottom: 0;
    }

    .password-requirements li::before {
        content: '•';
        color: #cbd5e1;
        font-size: 1.2em;
        line-height: 1;
    }

    .password-requirements li.requirement-met {
        color: #16a34a;
        font-weight: 500;
    }

    .password-requirements li.requirement-met::before {
        content: '✓';
        color: #16a34a;
    }

    /* Form Actions */
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 20px;
    }

    .save-button, .cancel-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 10px 18px;
        border-radius: 6px;
        font-size: 15px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        text-decoration: none;
        border: none;
    }

    .save-button {
        background: #3b82f6;
        color: white;
    }

    .save-button:hover:not(:disabled) {
        background: #2563eb;
    }

    .cancel-button {
        background: #f1f5f9;
        color: #475569;
        border: 1px solid #e2e8f0;
    }

    .cancel-button:hover:not(:disabled) {
        background: #e2e8f0;
    }

    .save-button:disabled, .cancel-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    /* Info Note */
    .info-note {
        background: linear-gradient(135deg, #e0f2f7 0%, #bae6fd 100%);
        border: 1px solid #7dd3fc;
        border-left: 4px solid #0ea5e9;
        color: #0c4a6e;
        padding: 20px;
        margin-top: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(14, 165, 233, 0.15);
        display: flex;
        align-items: flex-start;
        gap: 16px;
    }

    .info-note .info-icon {
        width: 40px;
        height: 40px;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        filter: invert(1) sepia(1) saturate(5) hue-rotate(180deg) brightness(0.8); /* Blue tint */
        flex-shrink: 0;
    }

    .info-note .info-content h3 {
        margin: 0 0 8px 0;
        font-size: 1.125rem;
        font-weight: 700;
        color: #0c4a6e;
    }

    .info-note .info-content p {
        margin: 0;
        font-size: 0.9375rem;
        color: #0c4a6e;
    }
</style>

@code {
    private string userName = "";
    private string userInitials = "";
    private string userRole = string.Empty; // Added userRole state variable
    private bool showUserMenu = false;
    private bool showSuccessMessage = false;
    private bool isChangingPassword = false;
    private string errorMessage = "";
    
    private PasswordChangeModel passwordModel = new PasswordChangeModel();
    
    // Verificações de força da senha
    private bool HasMinLength => passwordModel.NewPassword?.Length >= 8;
    private bool HasUpperCase => passwordModel.NewPassword?.Any(char.IsUpper) == true;
    private bool HasLowerCase => passwordModel.NewPassword?.Any(char.IsLower) == true;
    private bool HasDigit => passwordModel.NewPassword?.Any(char.IsDigit) == true;
    private bool HasSpecialChar => passwordModel.NewPassword?.Any(c => !char.IsLetterOrDigit(c)) == true;
    
    private bool IsPasswordValid => 
        HasMinLength && HasUpperCase && HasLowerCase && HasDigit && HasSpecialChar &&
        passwordModel.NewPassword == passwordModel.ConfirmPassword &&
        !string.IsNullOrEmpty(passwordModel.CurrentPassword);

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            // Verificar se o usuário está logado
            if (UserStateService.UserId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Carregar dados do usuário
            var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
                if (user != null)
                {
                    userName = user.Nome ?? "Usuário";
                    userInitials = string.Join("", userName.Split(' ').Select(n => n.Length > 0 ? n[0] : ' '));
                    userRole = user.Cargo ?? "Utilizador"; // Set the user role here
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do usuário: {ex.Message}");
            errorMessage = "Erro ao carregar dados do usuário.";
        }
    }
    
    private string GetPasswordStrengthClass()
    {
        if (string.IsNullOrEmpty(passwordModel.NewPassword))
            return "strength-empty";
            
        int score = 0;
        if (HasMinLength) score++;
        if (HasUpperCase) score++;
        if (HasLowerCase) score++;
        if (HasDigit) score++;
        if (HasSpecialChar) score++;
        
        return score switch
        {
            0 => "strength-empty",
            1 => "strength-weak",
            2 => "strength-weak",
            3 => "strength-medium",
            4 => "strength-good",
            5 => "strength-strong",
            _ => "strength-empty"
        };
    }
    
    private string GetPasswordStrengthText()
    {
        if (string.IsNullOrEmpty(passwordModel.NewPassword))
            return "";
            
        int score = 0;
        if (HasMinLength) score++;
        if (HasUpperCase) score++;
        if (HasLowerCase) score++;
        if (HasDigit) score++;
        if (HasSpecialChar) score++;
        
        return score switch
        {
            0 => "",
            1 => "Muito fraca",
            2 => "Fraca",
            3 => "Média",
            4 => "Boa",
            5 => "Forte",
            _ => ""
        };
    }
    
    private async Task ChangePasswordAsync()
    {
        isChangingPassword = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            // Verificar se o usuário está logado
            if (UserStateService.UserId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Primeiro, verificar a senha atual fazendo login
            var loginRequest = new
            {
                Email = await GetUserEmail(),
                Password = passwordModel.CurrentPassword
            };

            var loginResponse = await Http.PostAsJsonAsync("http://localhost:5189/api/Utilizadore/login", loginRequest);
            
            if (!loginResponse.IsSuccessStatusCode)
            {
                errorMessage = "Senha atual incorreta.";
                return;
            }

            // Se a senha atual está correta, buscar o usuário atual
            var userResponse = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = "Erro ao buscar dados do usuário.";
                return;
            }

            var currentUser = await userResponse.Content.ReadFromJsonAsync<UtilizadoreDto>();
            if (currentUser == null)
            {
                errorMessage = "Usuário não encontrado.";
                return;
            }

            // Atualizar a senha do usuário
            var updatedUser = new UtilizadoreDto
            {
                Id = currentUser.Id,
                Nome = currentUser.Nome,
                Email = currentUser.Email,
                Senha = passwordModel.NewPassword, // A API deve fazer o hash da nova senha
                Cargo = currentUser.Cargo,
                PermissaoId = currentUser.PermissaoId
            };

            var updateResponse = await Http.PutAsJsonAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}", updatedUser);

            if (updateResponse.IsSuccessStatusCode)
            {
                showSuccessMessage = true;
                StateHasChanged();

                // Aguardar 3 segundos antes de redirecionar
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/profile");
            }
            else
            {
                var errorContent = await updateResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro da API: {errorContent}");
                
                errorMessage = updateResponse.StatusCode switch
                {
                    HttpStatusCode.BadRequest => "Dados inválidos para alteração de senha.",
                    HttpStatusCode.NotFound => "Usuário não encontrado.",
                    HttpStatusCode.InternalServerError => "Erro interno do servidor.",
                    _ => $"Erro ao alterar senha: {updateResponse.StatusCode}"
                };
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Erro de conexão com o servidor. Verifique sua conexão.";
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado ao alterar senha.";
            Console.WriteLine($"Erro: {ex.Message}");
        }
        finally
        {
            isChangingPassword = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetUserEmail()
    {
        try
        {
            var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
                return user?.Email ?? "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar email do usuário: {ex.Message}");
        }
        return "";
    }
    
    private void CancelPasswordChange()
    {
        NavigationManager.NavigateTo("/profile");
    }
    
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private void Logout()
    {
        UserStateService.UserId = Guid.Empty;
        NavigationManager.NavigateTo("/login");
    }

    public class PasswordChangeModel
    {
        [Required(ErrorMessage = "A senha atual é obrigatória")]
        public string CurrentPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "A nova senha é obrigatória")]
        [StringLength(100, ErrorMessage = "A senha deve ter pelo menos {2} caracteres", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "A senha deve conter pelo menos uma letra minúscula, uma maiúscula, um número e um caractere especial.")]
        public string NewPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "A confirmação da senha é obrigatória")]
        [Compare("NewPassword", ErrorMessage = "A nova senha e a confirmação não coincidem")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}