@page "/profile/change-password"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using WebApplication5.DTO
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService UserStateService

<div class="app-container">
    <!-- Sidebar Navigation -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Gestão Ativos</h2>
        </div>
        <nav class="sidebar-nav">
            <a href="/dashboard" class="nav-item">
                <div class="nav-icon dashboard-nav-icon"></div>
                <span>Dashboard</span>
            </a>
            <a href="/portfolio" class="nav-item">
                <div class="nav-icon portfolio-nav-icon"></div>
                <span>Carteira</span>
            </a>
            <a href="/transactions" class="nav-item">
                <div class="nav-icon transactions-nav-icon"></div>
                <span>Transações</span>
            </a>
            <a href="/reports" class="nav-item">
                <div class="nav-icon reports-nav-icon"></div>
                <span>Relatórios</span>
            </a>
        </nav>
        <div class="sidebar-footer">
            <a href="javascript:void(0)" @onclick="Logout" class="nav-item logout">
                <div class="nav-icon logout-nav-icon"></div>
                <span>Sair</span>
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Top Header with Breadcrumbs -->
        <div class="page-header">
            <div class="breadcrumbs">
                <a href="/dashboard">Dashboard</a>
                <span class="separator">/</span>
                <a href="/profile">Meu Perfil</a>
                <span class="separator">/</span>
                <span class="current">Alterar Senha</span>
            </div>
            <div class="user-profile">
                <span class="user-greeting">Olá, <strong>@userName</strong></span>
                <button class="user-menu-button" @onclick="ToggleUserMenu">
                    <div class="avatar">@userInitials</div>
                    @if (showUserMenu)
                    {
                        <div class="user-menu">
                            <a href="/profile" class="user-menu-item">Meu Perfil</a>
                            <a href="javascript:void(0)" @onclick="Logout" class="user-menu-item logout">Sair</a>
                        </div>
                    }
                </button>
            </div>
        </div>

        <!-- Page Title -->
        <div class="page-title-actions">
            <h1>Alterar Senha</h1>
            <div class="actions">
                <button class="action-button" @onclick="CancelPasswordChange" disabled="@isChangingPassword">
                    <span class="action-icon cancel-icon"></span>
                    Cancelar
                </button>
            </div>
        </div>

        <!-- Change Password Form -->
        <div class="dashboard-section">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert-error">
                    <span class="alert-icon">!</span>
                    <span>@errorMessage</span>
                </div>
            }

            @if (showSuccessMessage)
            {
                <div class="success-message">
                    <div class="success-icon"></div>
                    <div class="success-content">
                        <h3>Senha Alterada com Sucesso</h3>
                        <p>A sua senha foi alterada com sucesso. Você será redirecionado para a página de perfil.</p>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="@passwordModel" OnValidSubmit="ChangePasswordAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    
                    <div class="password-form">
                        <div class="form-group">
                            <label for="currentPassword">Senha Atual</label>
                            <InputText type="password" id="currentPassword" @bind-Value="passwordModel.CurrentPassword" class="form-control" disabled="@isChangingPassword" />
                            <ValidationMessage For="@(() => passwordModel.CurrentPassword)" class="validation-message" />
                        </div>
                        
                        <div class="form-group">
                            <label for="newPassword">Nova Senha</label>
                            <InputText type="password" id="newPassword" @bind-Value="passwordModel.NewPassword" class="form-control" disabled="@isChangingPassword" />
                            <ValidationMessage For="@(() => passwordModel.NewPassword)" class="validation-message" />
                            <div class="password-strength">
                                <div class="strength-meter">
                                    <div class="strength-bar @GetPasswordStrengthClass()"></div>
                                </div>
                                <span class="strength-text">@GetPasswordStrengthText()</span>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="confirmPassword">Confirmar Nova Senha</label>
                            <InputText type="password" id="confirmPassword" @bind-Value="passwordModel.ConfirmPassword" class="form-control" disabled="@isChangingPassword" />
                            <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" class="validation-message" />
                        </div>
                        
                        <div class="password-requirements">
                            <h4>Requisitos de Senha</h4>
                            <ul>
                                <li class="@(HasMinLength ? "requirement-met" : "")">Pelo menos 8 caracteres</li>
                                <li class="@(HasUpperCase ? "requirement-met" : "")">Pelo menos uma letra maiúscula</li>
                                <li class="@(HasLowerCase ? "requirement-met" : "")">Pelo menos uma letra minúscula</li>
                                <li class="@(HasDigit ? "requirement-met" : "")">Pelo menos um número</li>
                                <li class="@(HasSpecialChar ? "requirement-met" : "")">Pelo menos um caractere especial</li>
                            </ul>
                        </div>
                        
                        <div class="form-actions">
                            <button type="submit" class="save-button" disabled="@(!IsPasswordValid || isChangingPassword)">
                                @if (isChangingPassword)
                                {
                                    <span>Alterando...</span>
                                }
                                else
                                {
                                    <span>Alterar Senha</span>
                                }
                            </button>
                            <button type="button" class="cancel-button" @onclick="CancelPasswordChange" disabled="@isChangingPassword">Cancelar</button>
                        </div>
                    </div>
                </EditForm>
                
                <div class="info-note">
                    <div class="info-icon"></div>
                    <div class="info-content">
                        <h3>Dica de Segurança</h3>
                        <p>Utilize senhas diferentes para cada serviço e evite reutilizar senhas antigas. Considere usar um gestor de senhas para maior segurança.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string userName = "";
    private string userInitials = "";
    private bool showUserMenu = false;
    private bool showSuccessMessage = false;
    private bool isChangingPassword = false;
    private string errorMessage = "";
    
    private PasswordChangeModel passwordModel = new PasswordChangeModel();
    
    // Verificações de força da senha
    private bool HasMinLength => passwordModel.NewPassword?.Length >= 8;
    private bool HasUpperCase => passwordModel.NewPassword?.Any(char.IsUpper) == true;
    private bool HasLowerCase => passwordModel.NewPassword?.Any(char.IsLower) == true;
    private bool HasDigit => passwordModel.NewPassword?.Any(char.IsDigit) == true;
    private bool HasSpecialChar => passwordModel.NewPassword?.Any(c => !char.IsLetterOrDigit(c)) == true;
    
    private bool IsPasswordValid => 
        HasMinLength && HasUpperCase && HasLowerCase && HasDigit && HasSpecialChar &&
        passwordModel.NewPassword == passwordModel.ConfirmPassword &&
        !string.IsNullOrEmpty(passwordModel.CurrentPassword);

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            // Verificar se o usuário está logado
            if (UserStateService.UserId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Carregar dados do usuário
            var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
                if (user != null)
                {
                    userName = user.Nome ?? "Usuário";
                    userInitials = string.Join("", userName.Split(' ').Select(n => n.Length > 0 ? n[0] : ' '));
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do usuário: {ex.Message}");
            errorMessage = "Erro ao carregar dados do usuário.";
        }
    }
    
    private string GetPasswordStrengthClass()
    {
        if (string.IsNullOrEmpty(passwordModel.NewPassword))
            return "strength-empty";
            
        int score = 0;
        if (HasMinLength) score++;
        if (HasUpperCase) score++;
        if (HasLowerCase) score++;
        if (HasDigit) score++;
        if (HasSpecialChar) score++;
        
        return score switch
        {
            0 => "strength-empty",
            1 => "strength-weak",
            2 => "strength-weak",
            3 => "strength-medium",
            4 => "strength-good",
            5 => "strength-strong",
            _ => "strength-empty"
        };
    }
    
    private string GetPasswordStrengthText()
    {
        if (string.IsNullOrEmpty(passwordModel.NewPassword))
            return "";
            
        int score = 0;
        if (HasMinLength) score++;
        if (HasUpperCase) score++;
        if (HasLowerCase) score++;
        if (HasDigit) score++;
        if (HasSpecialChar) score++;
        
        return score switch
        {
            0 => "",
            1 => "Muito fraca",
            2 => "Fraca",
            3 => "Média",
            4 => "Boa",
            5 => "Forte",
            _ => ""
        };
    }
    
    private async Task ChangePasswordAsync()
    {
        isChangingPassword = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            // Verificar se o usuário está logado
            if (UserStateService.UserId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Primeiro, verificar a senha atual fazendo login
            var loginRequest = new
            {
                Email = await GetUserEmail(),
                Password = passwordModel.CurrentPassword
            };

            var loginResponse = await Http.PostAsJsonAsync("http://localhost:5189/api/Utilizadore/login", loginRequest);
            
            if (!loginResponse.IsSuccessStatusCode)
            {
                errorMessage = "Senha atual incorreta.";
                return;
            }

            // Se a senha atual está correta, buscar o usuário atual
            var userResponse = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = "Erro ao buscar dados do usuário.";
                return;
            }

            var currentUser = await userResponse.Content.ReadFromJsonAsync<UtilizadoreDto>();
            if (currentUser == null)
            {
                errorMessage = "Usuário não encontrado.";
                return;
            }

            // Atualizar a senha do usuário
            var updatedUser = new UtilizadoreDto
            {
                Id = currentUser.Id,
                Nome = currentUser.Nome,
                Email = currentUser.Email,
                Senha = passwordModel.NewPassword, // A API deve fazer o hash da nova senha
                Cargo = currentUser.Cargo,
                PermissaoId = currentUser.PermissaoId
            };

            var updateResponse = await Http.PutAsJsonAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}", updatedUser);

            if (updateResponse.IsSuccessStatusCode)
            {
                showSuccessMessage = true;
                StateHasChanged();

                // Aguardar 3 segundos antes de redirecionar
                await Task.Delay(3000);
                NavigationManager.NavigateTo("/profile");
            }
            else
            {
                var errorContent = await updateResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro da API: {errorContent}");
                
                errorMessage = updateResponse.StatusCode switch
                {
                    HttpStatusCode.BadRequest => "Dados inválidos para alteração de senha.",
                    HttpStatusCode.NotFound => "Usuário não encontrado.",
                    HttpStatusCode.InternalServerError => "Erro interno do servidor.",
                    _ => $"Erro ao alterar senha: {updateResponse.StatusCode}"
                };
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Erro de conexão com o servidor. Verifique sua conexão.";
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado ao alterar senha.";
            Console.WriteLine($"Erro: {ex.Message}");
        }
        finally
        {
            isChangingPassword = false;
            StateHasChanged();
        }
    }

    private async Task<string> GetUserEmail()
    {
        try
        {
            var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");
            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
                return user?.Email ?? "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar email do usuário: {ex.Message}");
        }
        return "";
    }
    
    private void CancelPasswordChange()
    {
        NavigationManager.NavigateTo("/profile");
    }
    
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private void Logout()
    {
        UserStateService.UserId = Guid.Empty;
        NavigationManager.NavigateTo("/login");
    }

    public class PasswordChangeModel
    {
        [Required(ErrorMessage = "A senha atual é obrigatória")]
        public string CurrentPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "A nova senha é obrigatória")]
        [StringLength(100, ErrorMessage = "A senha deve ter pelo menos {2} caracteres", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "A senha deve conter pelo menos uma letra minúscula, uma maiúscula, um número e um caractere especial.")]
        public string NewPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "A confirmação da senha é obrigatória")]
        [Compare("NewPassword", ErrorMessage = "A nova senha e a confirmação não coincidem")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}