@page "/reports"
@page "/reports/{requestedReportType}"
@attribute [Authorize]
@using System.Net
@using System.Globalization
@using WebApplication5.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService UserStateService

<div class="app-container">
    <!-- Sidebar Navigation -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Gestão Ativos</h2>
        </div>
        <nav class="sidebar-nav">
            <a href="/main" class="nav-item">
                <div class="nav-icon dashboard-nav-icon"></div>
                <span>Dashboard</span>
            </a>
            <a href="/portfolio" class="nav-item">
                <div class="nav-icon portfolio-nav-icon"></div>
                <span>Carteira</span>
            </a>
            <a href="/transactions" class="nav-item">
                <div class="nav-icon transactions-nav-icon"></div>
                <span>Transações</span>
            </a>
            <a href="/reports" class="nav-item active">
                <div class="nav-icon reports-nav-icon"></div>
                <span>Relatórios</span>
            </a>
        </nav>
        <div class="sidebar-footer">
            <a href="javascript:void(0)" @onclick="Logout" class="nav-item logout">
                <div class="nav-icon logout-icon"></div>
                <span>Sair</span>
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <p>Carregando dados...</p>
                </div>
            </div>
        }
        else
        {
            <!-- Top Header -->
            <header class="dashboard-header">
                <div class="dashboard-title">
                    <h1>Relatórios</h1>
                    <p>Visualize e baixe os relatórios gerados</p>
                </div>
                <div class="user-profile">
                    <span class="user-greeting">Olá, <strong>@userName</strong></span>
                    <button class="user-menu-button" @onclick="ToggleUserMenu">
                        <div class="avatar">@userInitials</div>
                        @if (showUserMenu)
                        {
                            <div class="user-menu">
                                <a href="/profile" class="user-menu-item">Meu Perfil</a>
                                <a href="javascript:void(0)" @onclick="Logout" class="user-menu-item logout">Sair</a>
                            </div>
                        }
                    </button>
                </div>
            </header>

            <!-- Reports Content -->
            <div class="reports-container">
                @if (showGenerateForm)
                {
                    <!-- Report Generation Section -->
                    <div class="report-generation-section">
                        <div class="section-header">
                            <h2>@GenerationTitle</h2>
                            <button class="toggle-form-button" @onclick="ToggleGenerateForm">
                                @(showGenerateForm ? "Esconder" : "Mostrar")
                            </button>
                        </div>
                        <div class="report-generator-form">
                            <div class="form-row">
                                <div class="form-group">
                                    <label>Tipo de Relatório</label>
                                    <select @bind="newReport.Type">
                                        <option value="Fluxo de Caixa">Fluxo de Caixa</option>
                                        <option value="Rendimento de Ativos">Rendimento de Ativos</option>
                                        <option value="Análise de Despesas">Análise de Despesas</option>
                                        <option value="Projeção Financeira">Projeção Financeira</option>
                                        <option value="Impostos">Impostos</option>
                                        <option value="Carteira Consolidada">Carteira Consolidada</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Formato</label>
                                    <select @bind="newReport.Format">
                                        <option value="PDF">PDF</option>
                                        <option value="Excel">Excel</option>
                                        <option value="CSV">CSV</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>Período</label>
                                    <select @bind="selectedPeriod" @bind:after="UpdateDateRange">
                                        <option value="ThisMonth">Este Mês</option>
                                        <option value="LastMonth">Mês Passado</option>
                                        <option value="LastQuarter">Último Trimestre</option>
                                        <option value="ThisYear">Este Ano</option>
                                        <option value="LastYear">Ano Passado</option>
                                        <option value="Custom">Personalizado</option>
                                    </select>
                                </div>
                            </div>
                            @if (selectedPeriod == "Custom")
                            {
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>De:</label>
                                        <input type="date" @bind="startDate" @bind:format="yyyy-MM-dd" />
                                    </div>
                                    <div class="form-group">
                                        <label>Até:</label>
                                        <input type="date" @bind="endDate" @bind:format="yyyy-MM-dd" />
                                    </div>
                                </div>
                            }
                            <div class="form-row">
                                <button class="generate-report-button" @onclick="GenerateReport" disabled="@isGeneratingReport">
                                    <span class="button-icon">+</span> 
                                    @(isGeneratingReport ? "Gerando..." : "Gerar Relatório")
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="collapsed-generation-section">
                        <div class="section-header">
                            <h2>Gerar Novo Relatório</h2>
                            <button class="toggle-form-button" @onclick="ToggleGenerateForm">
                                Mostrar
                            </button>
                        </div>
                    </div>
                }

                <!-- Reports List -->
                <div id="reports_header_section">
                    <h2 id="reports_main_title">Relatórios Disponíveis</h2>
                    <div class="reports-filter">
                        <input type="text" placeholder="Pesquisar relatórios..." @bind="searchTerm" @bind:event="oninput" @onkeyup="SearchReports" />
                        <select @bind="selectedReportType" @bind:after="FilterReports">
                            <option value="">Todos os Tipos</option>
                            <option value="Fluxo de Caixa">Fluxo de Caixa</option>
                            <option value="Rendimento de Ativos">Rendimento de Ativos</option>
                            <option value="Análise de Despesas">Análise de Despesas</option>
                            <option value="Projeção Financeira">Projeção Financeira</option>
                            <option value="Impostos">Impostos</option>
                            <option value="Carteira Consolidada">Carteira Consolidada</option>
                        </select>
                    </div>
                </div>

                @if (isGeneratingReport)
                {
                    <div class="generating-message">
                        <div class="spinner"></div>
                        <p>Gerando relatório, por favor aguarde...</p>
                    </div>
                }

                <div id="reports_table_wrapper">
                    <table id="reports_data_table">
                        <thead>
                            <tr>
                                <th>Data</th>
                                <th>Nome</th>
                                <th>Tipo</th>
                                <th>Período</th>
                                <th>Formato</th>
                                <th>Status</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredReports.Count == 0)
                            {
                                <tr>
                                    <td colspan="7" class="no-reports-message">
                                        Nenhum relatório encontrado com os filtros atuais.
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var report in filteredReports)
                                {
                                    <tr>
                                        <td>@report.DateGenerated.ToString("dd/MM/yyyy")</td>
                                        <td>@report.Name</td>
                                        <td>@report.Type</td>
                                        <td>@report.Period</td>
                                        <td class="reports_format">@report.Format</td>
                                        <td>
                                            <span class="reports_status_badge reports_@report.Status.ToLower()">@report.Status</span>
                                        </td>
                                        <td class="reports_actions">
                                            <button class="reports_btn reports_download" @onclick="() => DownloadReport(report.Id)" title="Baixar">↓</button>
                                            <button class="reports_btn reports_delete" @onclick="() => DeleteReport(report.Id)" title="Excluir">×</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal-overlay">
        <div class="modal delete-modal">
            <div class="modal-header">
                <h2>Confirmar Exclusão</h2>
                <button class="close-button" @onclick="CloseModal">×</button>
            </div>
            <div class="modal-body">
                <p>Tem certeza que deseja excluir este relatório?</p>
                <p><strong>@(reportToDelete?.Name)</strong></p>
                <p>Esta ação não pode ser desfeita.</p>
            </div>
            <div class="modal-footer">
                <button class="cancel-button" @onclick="CloseModal">Cancelar</button>
                <button class="delete-button" @onclick="ConfirmDeleteReport">Excluir</button>
            </div>
        </div>
    </div>
}

<!-- Download Confirmation Modal -->
@if (showDownloadModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h2>Download Iniciado</h2>
                <button class="close-button" @onclick="CloseDownloadModal">×</button>
            </div>
            <div class="modal-body">
                <p>O download do relatório <strong>@downloadingReport?.Name</strong> foi iniciado.</p>
                <p>Caso o download não inicie automaticamente, clique no botão abaixo.</p>
            </div>
            <div class="modal-footer">
                <button class="action-button" @onclick="CloseDownloadModal">Fechar</button>
                <button class="download-button" @onclick="ForceDownload">Baixar Novamente</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string RequestedReportType { get; set; }

    private bool isLoading = true;
    private string userName = "Utilizador";
    private string userInitials => string.Join("", userName.Split(' ').Select(n => n[0]));
    private bool showUserMenu = false;
    
    // UI State
    private bool showGenerateForm = false;
    private bool isGeneratingReport = false;
    
    // Reports Management
    private List<Report> reports = new List<Report>();
    private List<Report> filteredReports = new List<Report>();
    private string searchTerm = "";
    private string selectedReportType = "";
    private string selectedPeriod = "ThisMonth";
    private DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime endDate = DateTime.Now;
    
    // Modal States
    private bool showDeleteModal = false;
    private bool showDownloadModal = false;
    private Report reportToDelete;
    private Report downloadingReport;
    private Report newReport = new Report();
    
    // Financial Data
    private List<CarteiraDto> userCarteiras = new List<CarteiraDto>();
    private List<DepositoDto> depositos = new List<DepositoDto>();
    private List<FundosInvestimentoDto> fundos = new List<FundosInvestimentoDto>();
    private List<ImoveisArrendamentoDto> imoveis = new List<ImoveisArrendamentoDto>();
    
    // Get dynamic title based on requested report type
    private string GenerationTitle => string.IsNullOrEmpty(RequestedReportType) 
        ? "Gerar Novo Relatório" 
        : $"Gerar Relatório de {RequestedReportType}";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        
        // Set filtered reports to all reports initially
        filteredReports = new List<Report>(reports);
        
        // Initialize new report
        newReport = new Report
        {
            Type = string.IsNullOrEmpty(RequestedReportType) ? "Fluxo de Caixa" : RequestedReportType,
            Format = "PDF",
            Status = "Pendente"
        };
        
        // If report type is specified in URL, show the generation form
        showGenerateForm = !string.IsNullOrEmpty(RequestedReportType);
        
        // If report type is specified, filter reports to show that type
        if (!string.IsNullOrEmpty(RequestedReportType))
        {
            selectedReportType = RequestedReportType;
            FilterReports();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Carregar dados do usuário
            await LoadUserData();

            // Carregar dados financeiros
            await LoadFinancialData();

            // Gerar relatórios baseados nos dados reais
            await GenerateReportsFromData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            if (UserStateService.UserId != Guid.Empty)
            {
                var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");
                if (response.IsSuccessStatusCode)
                {
                    var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
                    if (user != null)
                    {
                        userName = user.Nome ?? "Utilizador";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados do usuário: {ex.Message}");
        }
    }

    private async Task LoadFinancialData()
    {
        try
        {
            // Carregar carteiras do usuário
            var carteirasResponse = await Http.GetAsync("http://localhost:5189/api/Carteira");
            if (carteirasResponse.IsSuccessStatusCode)
            {
                var allCarteiras = await carteirasResponse.Content.ReadFromJsonAsync<List<CarteiraDto>>();
                userCarteiras = allCarteiras?.Where(c => c.UtilizadorId == UserStateService.UserId).ToList() ?? new List<CarteiraDto>();
            }

            // Carregar depósitos
            var depositosResponse = await Http.GetAsync("http://localhost:5189/api/Deposito");
            if (depositosResponse.IsSuccessStatusCode)
            {
                depositos = await depositosResponse.Content.ReadFromJsonAsync<List<DepositoDto>>() ?? new List<DepositoDto>();
            }

            // Carregar fundos
            var fundosResponse = await Http.GetAsync("http://localhost:5189/api/FundosInvestimentos");
            if (fundosResponse.IsSuccessStatusCode)
            {
                fundos = await fundosResponse.Content.ReadFromJsonAsync<List<FundosInvestimentoDto>>() ?? new List<FundosInvestimentoDto>();
            }

            // Carregar imóveis
            var imoveisResponse = await Http.GetAsync("http://localhost:5189/api/ImoveisArrendamento");
            if (imoveisResponse.IsSuccessStatusCode)
            {
                imoveis = await imoveisResponse.Content.ReadFromJsonAsync<List<ImoveisArrendamentoDto>>() ?? new List<ImoveisArrendamentoDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados financeiros: {ex.Message}");
        }
    }

    private async Task GenerateReportsFromData()
    {
        reports.Clear();

        // Gerar relatórios baseados nos dados reais do usuário
        if (userCarteiras.Any())
        {
            // Relatório de Carteira Consolidada
            reports.Add(new Report
            {
                Id = reports.Count + 1,
                Name = $"Carteira Consolidada - {DateTime.Now.ToString("MMMM yyyy", new CultureInfo("pt-PT"))}",
                Type = "Carteira Consolidada",
                Period = DateTime.Now.ToString("MMMM yyyy", new CultureInfo("pt-PT")),
                Format = "PDF",
                DateGenerated = DateTime.Now.AddDays(-Random.Shared.Next(1, 30)),
                Status = "Concluído"
            });
        }

        if (depositos.Any())
        {
            // Relatório de Depósitos
            reports.Add(new Report
            {
                Id = reports.Count + 1,
                Name = $"Rendimento de Depósitos - {DateTime.Now.AddMonths(-1).ToString("MMMM yyyy", new CultureInfo("pt-PT"))}",
                Type = "Rendimento de Ativos",
                Period = DateTime.Now.AddMonths(-1).ToString("MMMM yyyy", new CultureInfo("pt-PT")),
                Format = "Excel",
                DateGenerated = DateTime.Now.AddDays(-Random.Shared.Next(5, 15)),
                Status = "Concluído"
            });
        }

        if (fundos.Any())
        {
            // Relatório de Fundos
            reports.Add(new Report
            {
                Id = reports.Count + 1,
                Name = $"Análise de Fundos de Investimento - Q1 {DateTime.Now.Year}",
                Type = "Rendimento de Ativos",
                Period = $"Q1 {DateTime.Now.Year}",
                Format = "PDF",
                DateGenerated = DateTime.Now.AddDays(-Random.Shared.Next(10, 25)),
                Status = "Concluído"
            });
        }

        if (imoveis.Any())
        {
            // Relatório de Imóveis
            reports.Add(new Report
            {
                Id = reports.Count + 1,
                Name = $"Fluxo de Caixa Imobiliário - {DateTime.Now.ToString("MMMM yyyy", new CultureInfo("pt-PT"))}",
                Type = "Fluxo de Caixa",
                Period = DateTime.Now.ToString("MMMM yyyy", new CultureInfo("pt-PT")),
                Format = "Excel",
                DateGenerated = DateTime.Now.AddDays(-Random.Shared.Next(3, 12)),
                Status = "Concluído"
            });
        }

        // Relatório de Impostos (sempre disponível)
        reports.Add(new Report
        {
            Id = reports.Count + 1,
            Name = $"Relatório de Impostos - {DateTime.Now.Year - 1}",
            Type = "Impostos",
            Period = $"Ano {DateTime.Now.Year - 1}",
            Format = "PDF",
            DateGenerated = new DateTime(DateTime.Now.Year, 3, 15),
            Status = "Concluído"
        });

        // Projeção Financeira
        reports.Add(new Report
        {
            Id = reports.Count + 1,
            Name = $"Projeção Financeira - {DateTime.Now.Year}",
            Type = "Projeção Financeira",
            Period = $"Ano {DateTime.Now.Year}",
            Format = "Excel",
            DateGenerated = DateTime.Now.AddDays(-Random.Shared.Next(20, 40)),
            Status = "Concluído"
        });
    }
    
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    
    private void ToggleGenerateForm()
    {
        showGenerateForm = !showGenerateForm;
    }
    
    private void Logout()
    {
        UserStateService.UserId = Guid.Empty;
        NavigationManager.NavigateTo("/");
    }
    
    private void UpdateDateRange()
    {
        // Set date range based on selected period
        switch (selectedPeriod)
        {
            case "ThisMonth":
                startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                endDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));
                break;
            case "LastMonth":
                var lastMonth = DateTime.Now.AddMonths(-1);
                startDate = new DateTime(lastMonth.Year, lastMonth.Month, 1);
                endDate = new DateTime(lastMonth.Year, lastMonth.Month, DateTime.DaysInMonth(lastMonth.Year, lastMonth.Month));
                break;
            case "LastQuarter":
                int currentQuarter = (DateTime.Now.Month - 1) / 3 + 1;
                int lastQuarter = currentQuarter - 1;
                int year = DateTime.Now.Year;
                if (lastQuarter < 1)
                {
                    lastQuarter = 4;
                    year -= 1;
                }
                startDate = new DateTime(year, (lastQuarter - 1) * 3 + 1, 1);
                endDate = new DateTime(year, lastQuarter * 3, DateTime.DaysInMonth(year, lastQuarter * 3));
                break;
            case "ThisYear":
                startDate = new DateTime(DateTime.Now.Year, 1, 1);
                endDate = new DateTime(DateTime.Now.Year, 12, 31);
                break;
            case "LastYear":
                startDate = new DateTime(DateTime.Now.Year - 1, 1, 1);
                endDate = new DateTime(DateTime.Now.Year - 1, 12, 31);
                break;
            case "Custom":
                // Use the user-defined date range
                break;
        }
    }
    
    private string GetPeriodName()
    {
        // Format the period name for the report based on selected period
        switch (selectedPeriod)
        {
            case "ThisMonth":
                return DateTime.Now.ToString("MMMM yyyy", new CultureInfo("pt-PT"));
            case "LastMonth":
                return DateTime.Now.AddMonths(-1).ToString("MMMM yyyy", new CultureInfo("pt-PT"));
            case "LastQuarter":
                int currentQuarter = (DateTime.Now.Month - 1) / 3 + 1;
                int lastQuarter = currentQuarter - 1;
                int year = DateTime.Now.Year;
                if (lastQuarter < 1)
                {
                    lastQuarter = 4;
                    year -= 1;
                }
                return $"Q{lastQuarter} {year}";
            case "ThisYear":
                return $"Ano {DateTime.Now.Year}";
            case "LastYear":
                return $"Ano {DateTime.Now.Year - 1}";
            case "Custom":
                if (startDate.Year == endDate.Year && startDate.Month == endDate.Month)
                {
                    return startDate.ToString("MMMM yyyy", new CultureInfo("pt-PT"));
                }
                else if (startDate.Year == endDate.Year)
                {
                    return $"{startDate.ToString("MMMM", new CultureInfo("pt-PT"))} a {endDate.ToString("MMMM yyyy", new CultureInfo("pt-PT"))}";
                }
                else
                {
                    return $"{startDate.ToString("MMMM yyyy", new CultureInfo("pt-PT"))} a {endDate.ToString("MMMM yyyy", new CultureInfo("pt-PT"))}";
                }
        }
        return "";
    }
    
    private void SearchReports()
    {
        ApplyFilters();
    }
    
    private void FilterReports()
    {
        ApplyFilters();
    }
    
    private void ApplyFilters()
    {
        filteredReports = reports.Where(r => 
            (string.IsNullOrWhiteSpace(searchTerm) || 
             r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             r.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             r.Period.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(selectedReportType) || r.Type == selectedReportType)
        ).ToList();
    }
    
    private async Task GenerateReport()
    {
        try
        {
            isGeneratingReport = true;
            StateHasChanged();
            
            UpdateDateRange();
            var reportPeriod = GetPeriodName();
            var reportName = $"{newReport.Type} - {reportPeriod}";
            
            // Simular geração do relatório baseado nos dados reais
            await Task.Delay(2000);
            
            var report = new Report
            {
                Id = reports.Count > 0 ? reports.Max(r => r.Id) + 1 : 1,
                Name = reportName,
                Type = newReport.Type,
                Period = reportPeriod,
                Format = newReport.Format,
                DateGenerated = DateTime.Now,
                Status = "Concluído"
            };
            
            reports.Add(report);
            ApplyFilters();
            showGenerateForm = false;
            
            // Auto-download
            await Task.Delay(200);
            DownloadReport(report.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao gerar relatório: {ex.Message}");
        }
        finally
        {
            isGeneratingReport = false;
            StateHasChanged();
        }
    }
    
    private void DownloadReport(int id)
    {
        downloadingReport = reports.FirstOrDefault(r => r.Id == id);
        if (downloadingReport != null)
        {
            showDownloadModal = true;
        }
    }
    
    private void ForceDownload()
    {
        CloseDownloadModal();
    }
    
    private void DeleteReport(int id)
    {
        reportToDelete = reports.FirstOrDefault(r => r.Id == id);
        if (reportToDelete != null)
        {
            showDeleteModal = true;
        }
    }
    
    private void ConfirmDeleteReport()
    {
        if (reportToDelete != null)
        {
            reports.Remove(reportToDelete);
            filteredReports.Remove(reportToDelete);
            CloseModal();
        }
    }
    
    private void CloseModal()
    {
        showDeleteModal = false;
    }
    
    private void CloseDownloadModal()
    {
        showDownloadModal = false;
        downloadingReport = null;
    }
    
    // Report class
    public class Report
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Period { get; set; } = string.Empty;
        public string Format { get; set; } = string.Empty;
        public DateTime DateGenerated { get; set; }
        public string Status { get; set; } = string.Empty; // "Pendente", "Concluído", "Erro"
    }
}

<style>
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 50vh;
    }

    .loading-spinner {
        text-align: center;
        padding: 2rem;
    }
</style>