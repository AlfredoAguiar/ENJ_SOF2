@page "/portfolio"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService UserStateService
@using System.Globalization
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization
@using WebApplication5.DTO

@if (isLoading)
{
    <div class="loading-container">
        <div class="loading-spinner">
            <p>Carregando...</p>
        </div>
    </div>
}
else if (isAuthenticated)
{
    <div class="app-container">
        <!-- Sidebar Navigation -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h2>Gestão Ativos</h2>
            </div>
            <nav class="sidebar-nav">
                @if (userRole == "Utilizador")
                {
                    <a href="/main" class="nav-item @(NavigationManager.Uri.EndsWith("/main") ? "active" : "")">
                        <div class="nav-icon dashboard-nav-icon"></div>
                        <span>Dashboard</span>
                    </a>
                    <a href="/portfolio" class="nav-item @(NavigationManager.Uri.EndsWith("/portfolio") ? "active" : "")">
                        <div class="nav-icon portfolio-nav-icon"></div>
                        <span>Carteira</span>
                    </a>
                    <a href="/transactions" class="nav-item @(NavigationManager.Uri.EndsWith("/transactions") ? "active" : "")">
                        <div class="nav-icon transactions-nav-icon"></div>
                        <span>Transações</span>
                    </a>
                }
                else if (userRole == "GestorUtilizadores")
                {
                    <a href="/main" class="nav-item @(NavigationManager.Uri.EndsWith("/main") ? "active" : "")">
                        <div class="nav-icon dashboard-nav-icon"></div>
                        <span>Dashboard</span>
                    </a>
                    <a href="/portfolio" class="nav-item @(NavigationManager.Uri.EndsWith("/portfolio") ? "active" : "")">
                        <div class="nav-icon portfolio-nav-icon"></div>
                        <span>Carteira</span>
                    </a>
                    <a href="/transactions" class="nav-item @(NavigationManager.Uri.EndsWith("/transactions") ? "active" : "")">
                        <div class="nav-icon transactions-nav-icon"></div>
                        <span>Transações</span>
                    </a>
                    <a href="/reports" class="nav-item @(NavigationManager.Uri.EndsWith("/reports") ? "active" : "")">
                        <div class="nav-icon reports-nav-icon"></div>
                        <span>Relatórios</span>
                    </a>
                }
            </nav>
            <div class="sidebar-footer">
                <a href="javascript:void(0)" @onclick="Logout" class="nav-item logout">
                    <div class="nav-icon logout-nav-icon"></div>
                    <span>Sair</span>
                </a>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <header class="dashboard-header">
                <div class="dashboard-title">
                    <h1>Carteira</h1>
                    <p>Gestão dos seus ativos financeiros</p>
                </div>
                <div class="user-profile">
                    <span class="user-greeting">Olá, <strong>@userName</strong></span>
                    <button class="user-menu-button" @onclick="ToggleUserMenu">
                        <div class="avatar">@userInitials</div>
                        @if (showUserMenu)
                        {
                            <div class="user-menu">
                                <a href="/profile" class="user-menu-item">Meu Perfil</a>
                                <a href="javascript:void(0)" @onclick="Logout" class="user-menu-item logout">Sair</a>
                            </div>
                        }
                    </button>
                </div>
            </header>

            <div class="portfolio-container">
                <!-- Summary Cards -->
                <div class="summary-cards">
                    <div class="summary-card">
                        <div class="card-icon blue-icon">€</div>
                        <div class="card-content">
                            <h3>@FormatCurrency(totalValue)</h3>
                            <p>Valor Total da Carteira</p>
                        </div>
                    </div>
                    <div class="summary-card">
                        <div class="card-icon green-icon">%</div>
                        <div class="card-content">
                            <h3>@FormatPercentage(monthlyReturn)</h3>
                            <p>Retorno Mensal</p>
                        </div>
                    </div>
                    <div class="summary-card">
                        <div class="card-icon yellow-icon">€</div>
                        <div class="card-content">
                            <h3>@FormatCurrency(monthlyIncome)</h3>
                            <p>Rendimento Mensal</p>
                        </div>
                    </div>
                    <div class="summary-card">
                        <div class="card-icon red-icon">#</div>
                        <div class="card-content">
                            <h3>@alerts</h3>
                            <p>Alertas Ativos</p>
                        </div>
                    </div>
                </div>

                <!-- Error Display -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        <div class="error-content">
                            <strong>Erro:</strong> @errorMessage
                            <button class="error-close" @onclick="ClearError">×</button>
                        </div>
                    </div>
                }

                <!-- Success Display -->
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="success-message">
                        <div class="success-content">
                            <strong>Sucesso:</strong> @successMessage
                            <button class="success-close" @onclick="ClearSuccess">×</button>
                        </div>
                    </div>
                }

                <!-- Search and Add Controls -->
                <div class="actions-bar">
                    <div class="search-container">
                        <input type="text" placeholder="Pesquisar ativos..." @bind="searchTerm" @bind:event="oninput" @onkeyup="SearchAssets" />
                        <div class="filter-container">
                            <select @bind="selectedType" @bind:after="FilterByType">
                                <option value="">Todos os Tipos</option>
                                <option value="DepositoAPrazo">Depósitos a Prazo</option>
                                <option value="FundoInvestimento">Fundos de Investimento</option>
                                <option value="ImovelArrendamento">Imóveis Arrendados</option>
                            </select>
                        </div>
                    </div>
                    <button class="add-asset-btn" @onclick="ShowAddAssetModal">
                        <span class="add-icon">+</span>
                        Adicionar Ativo
                    </button>
                </div>

                <!-- Assets List -->
                <div class="assets-section">
                    <div class="section-header">
                        <h2>Meus Ativos</h2>
                        <div class="view-toggle">
                            <button class="@(viewMode == "list" ? "active" : "")" @onclick="@(() => viewMode = "list")">
                                <i class="list-view-icon"></i>
                            </button>
                            <button class="@(viewMode == "grid" ? "active" : "")" @onclick="@(() => viewMode = "grid")">
                                <i class="grid-view-icon"></i>
                            </button>
                        </div>
                    </div>

                    @if (filteredAssets != null && filteredAssets.Any())
                    {
                        @if (viewMode == "list")
                        {
                            <div class="assets-list">
                                <table>
                                    <thead>
                                    <tr>
                                        <th>Nome</th>
                                        <th>Tipo</th>
                                        <th>Valor</th>
                                        <th>Retorno</th>
                                        <th>Data de Início</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var asset in filteredAssets)
                                    {
                                        <tr>
                                            <td>@GetAssetDisplayName(asset)</td>
                                            <td>@GetAssetTypeName(asset.TipoAtivo)</td>
                                            <td>@FormatCurrency((decimal)asset.ValorInvestido)</td>
                                            <td class="return-value">@asset.TaxaPercentagem.ToString("0.0")%</td>
                                            <td>@asset.DataAquisicao.ToString("dd/MM/yyyy")</td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="assets-grid">
                                @foreach (var asset in filteredAssets)
                                {
                                    <div class="asset-card @asset.TipoAtivo.ToLower()">
                                        <div class="asset-card-header">
                                            <h3>@GetAssetDisplayName(asset)</h3>
                                            <span class="asset-type-tag">@GetAssetTypeName(asset.TipoAtivo)</span>
                                        </div>
                                        <div class="asset-card-body">
                                            <div class="asset-detail">
                                                <span class="detail-label">Valor:</span>
                                                <span class="detail-value">@FormatCurrency((decimal)asset.ValorInvestido)</span>
                                            </div>
                                            <div class="asset-detail">
                                                <span class="detail-label">Retorno:</span>
                                                <span class="detail-value return-value">@asset.TaxaPercentagem.ToString("0.0")%</span>
                                            </div>
                                            <div class="asset-detail">
                                                <span class="detail-label">Data de Início:</span>
                                                <span class="detail-value">@asset.DataAquisicao.ToString("dd/MM/yyyy")</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <div style="font-size: 48px; margin-bottom: 16px;">📋</div>
                            <h3>Sem ativos encontrados</h3>
                            <p>Não há ativos que correspondam aos critérios de pesquisa</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (showAddAssetModal)
{
    <div class="modal-overlay" @onclick="HideAddAssetModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Adicionar Novo Ativo</h3>
                <button class="close-btn" @onclick="HideAddAssetModal">×</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Tipo de Ativo:</label>
                    <select @bind="newAsset.TipoAtivo" @bind:after="OnAssetTypeChange">
                        <option value="">Selecione o tipo</option>
                        <option value="DepositoAPrazo">Depósito a Prazo</option>
                        <option value="FundoInvestimento">Fundo de Investimento</option>
                        <option value="ImovelArrendamento">Imóvel Arrendado</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Valor Investido:</label>
                    <input type="number" @bind="newAsset.ValorInvestido" placeholder="0.00" step="0.01" />
                </div>

                <div class="form-group">
                    <label>Taxa de Retorno (%):</label>
                    <input type="number" @bind="newAsset.TaxaPercentagem" placeholder="0.0" step="0.1" />
                </div>

                <div class="form-group">
                    <label>Data de Aquisição:</label>
                    <input type="date" @bind="tempDataAquisicao" @bind:format="yyyy-MM-dd" @bind:after="OnDateChanged" />
                </div>

                @if (!string.IsNullOrEmpty(newAsset.TipoAtivo))
                {
                    @if (newAsset.TipoAtivo == "DepositoAPrazo")
                    {
                        <div class="form-group">
                            <label>Banco:</label>
                            <input type="text" @bind="depositoDetails.Banco" placeholder="Ex: Banco Santander" />
                        </div>
                        <div class="form-group">
                            <label>Número da Conta:</label>
                            <input type="text" @bind="depositoDetails.NumeroConta" placeholder="Ex: 123456789" />
                        </div>
                    }
                    else if (newAsset.TipoAtivo == "FundoInvestimento")
                    {
                        <div class="form-group">
                            <label>Nome do Fundo:</label>
                            <input type="text" @bind="fundoDetails.Nome" placeholder="Ex: Fundo Ações Europa" />
                        </div>
                        <div class="form-group">
                            <label>Duração (meses):</label>
                            <input type="number" @bind="fundoDetails.DuracaoMeses" placeholder="12" min="1" />
                        </div>
                    }
                    else if (newAsset.TipoAtivo == "ImovelArrendamento")
                    {
                        <div class="form-group">
                            <label>Designação: <span style="color: red;">*</span></label>
                            <input type="text" @bind="imovelDetails.Designacao" placeholder="Ex: Apartamento T2 no centro da cidade" required />
                        </div>
                        <div class="form-group">
                            <label>Localização:</label>
                            <input type="text" @bind="imovelDetails.Morada" placeholder="Ex: Rua das Flores, 123" />
                        </div>
                        <div class="form-group">
                            <label>Renda Mensal: <span style="color: red;">*</span></label>
                            <input type="number" @bind="imovelDetails.ValorRenda" placeholder="0.00" step="0.01" min="0.01" required />
                        </div>
                        <div class="form-group">
                            <label>Taxa de Condomínio:</label>
                            <input type="number" @bind="imovelDetails.TaxaCondominio" placeholder="0.00" step="0.01" min="0" />
                        </div>
                        <div class="form-group">
                            <label>Despesas Anuais:</label>
                            <input type="number" @bind="imovelDetails.DespesasAnuais" placeholder="0.00" step="0.01" min="0" />
                        </div>
                        <div class="form-group">
                            <label>Percentagem de Propriedade (%):</label>
                            <input type="number" @bind="imovelDetails.PercentagemPropriedade" placeholder="100" step="0.1" min="0.1" max="100" />
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" @onclick="HideAddAssetModal">Cancelar</button>
                <button class="btn-primary" @onclick="CreateAsset" disabled="@(isCreatingAsset || !IsFormValid())" >
                    @if (isCreatingAsset)
                    {
                        <span>Criando...</span>
                    }
                    else
                    {
                        <span>Criar Ativo</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<style>
    .app-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8fafc;
        color: #334155;
    }

    .sidebar {
        width: 250px;
        background: linear-gradient(180deg, #1e293b 0%, #0f172a 100%);
        color: white;
        padding: 20px;
        display: flex;
        flex-direction: column;
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        height: 100vh;
    }

    .sidebar-header {
        margin-bottom: 30px;
        text-align: center;
    }

    .sidebar-header h2 {
        font-size: 24px;
        font-weight: 700;
        color: #e2e8f0;
    }

    .sidebar-nav {
        flex-grow: 1;
    }

    .nav-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        margin-bottom: 10px;
        border-radius: 8px;
        color: #cbd5e1;
        text-decoration: none;
        transition: background-color 0.2s, color 0.2s;
    }

    .nav-item:hover {
        background-color: #334155;
        color: white;
    }

    .nav-item.active {
        background-color: #3b82f6;
        color: white;
        font-weight: 600;
        box-shadow: 0 4px 10px rgba(59, 130, 246, 0.3);
    }

    .nav-icon {
        width: 24px;
        height: 24px;
        margin-right: 12px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        filter: invert(1);
    }

    .dashboard-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>'); }
    .portfolio-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 12V8H6a2 2 0 0 1-2-2c0-1.1.9-2 2-2h12v4"></path><path d="M4 6v12c0 1.1.9 2 2 2h14v-4"></path><path d="M18 12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2v-4h-2Z"></path></svg>'); }
    .transactions-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>'); }
    .reports-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>'); }
    .logout-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>'); }

    .sidebar-footer {
        margin-top: auto;
        padding-top: 20px;
        border-top: 1px solid #334155;
    }

    .main-content {
        flex-grow: 1;
        padding: 20px;
        overflow-y: auto;
    }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .loading-spinner {
        text-align: center;
        padding: 2rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    }

    .loading-spinner::after {
        content: "";
        display: block;
        width: 40px;
        height: 40px;
        margin: 20px auto;
        border-radius: 50%;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        animation: spin 1s linear infinite;
    }

    .loading-spinner p {
        margin: 0;
        color: #333;
        font-weight: 600;
        font-size: 1.1rem;
    }
    

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
    }

    .dashboard-title h1 {
        font-size: 28px;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 4px;
    }

    .dashboard-title p {
        color: #64748b;
        font-size: 16px;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 12px;
        position: relative;
    }

    .user-greeting {
        font-size: 16px;
        color: #64748b;
    }

    .user-menu-button {
        background: none;
        border: none;
        cursor: pointer;
    }

    .avatar {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 18px;
        cursor: pointer;
    }

    .user-menu {
        position: absolute;
        right: 0;
        top: 60px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 200px;
        z-index: 100;
        overflow: hidden;
    }

    .user-menu-item {
        display: block;
        padding: 12px 16px;
        color: #334155;
        text-decoration: none;
        border-bottom: 1px solid #e2e8f0;
    }

    .user-menu-item:hover {
        background-color: #f8fafc;
    }

    .user-menu-item.logout {
        color: #e53e3e;
    }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 24px;
        margin-bottom: 32px;
    }

    .summary-card {
        background: white;
        border-radius: 12px;
        padding: 28px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .card-icon {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: bold;
        color: white;
    }

    .blue-icon { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
    .red-icon { background: linear-gradient(135deg, #ef4444, #b91c1c); }
    .green-icon { background: linear-gradient(135deg, #22c55e, #16a34a); }
    .yellow-icon { background: linear-gradient(135deg, #f59e0b, #d97706); }

    .card-content h3 {
        font-size: 24px;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 4px;
    }

    .card-content p {
        font-size: 15px;
        color: #64748b;
    }

    .error-message, .success-message {
        margin-bottom: 24px;
        border-radius: 8px;
        padding: 16px;
        position: relative;
    }

    .error-message {
        background-color: #fef2f2;
        border: 1px solid #fecaca;
        color: #dc2626;
    }

    .success-message {
        background-color: #f0fdf4;
        border: 1px solid #bbf7d0;
        color: #16a34a;
    }

    .error-content, .success-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .error-close, .success-close {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        padding: 0;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .actions-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
        background: white;
        border-radius: 12px;
        padding: 20px 28px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
        flex-wrap: wrap;
        gap: 16px;
    }

    .search-container {
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
        flex-grow: 1;
    }

    .search-container input[type="text"] {
        flex-grow: 1;
        min-width: 200px;
        padding: 10px 14px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 15px;
        background: #f8fafc;
    }

    .search-container input[type="text"]:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .filter-container {
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
    }

    .filter-container select {
        padding: 10px 14px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 15px;
        background: #f8fafc;
        appearance: none;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 16px;
        padding-right: 30px;
    }

    .filter-container select:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .assets-section {
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
        overflow: hidden;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 28px;
        border-bottom: 1px solid #e2e8f0;
    }

    .section-header h2 {
        font-size: 20px;
        font-weight: 600;
        color: #1e293b;
        margin: 0;
    }

    .view-toggle {
        display: flex;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        overflow: hidden;
    }

    .view-toggle button {
        background: none;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
        transition: background-color 0.2s, color 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .view-toggle button.active {
        background-color: #3b82f6;
        color: white;
    }

    .view-toggle button:hover:not(.active) {
        background-color: #f1f5f9;
    }

    .list-view-icon {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>');
        width: 20px;
        height: 20px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
    }

    .grid-view-icon {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>');
        width: 20px;
        height: 20px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
    }

    .view-toggle button.active .list-view-icon,
    .view-toggle button.active .grid-view-icon {
        filter: invert(1);
    }

    .assets-list {
        overflow-x: auto;
        width: 100%;
    }

    .assets-list table {
        width: 100%;
        border-collapse: collapse;
        min-width: 800px;
    }

    .assets-list th, .assets-list td {
        text-align: left;
        padding: 16px 28px;
        border-bottom: 1px solid #f1f5f9;
        font-size: 15px;
        vertical-align: middle;
    }

    .assets-list th {
        background: #f8fafc;
        font-weight: 600;
        color: #475569;
        white-space: nowrap;
    }

    .assets-list tbody tr:last-child td {
        border-bottom: none;
    }

    .assets-list tbody tr:hover {
        background: #f8fafc;
    }

    .assets-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        padding: 28px;
    }

    .asset-card {
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .asset-card-header {
        background: #e2e8f0;
        padding: 16px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #cbd5e1;
    }

    .asset-card-header h3 {
        font-size: 18px;
        font-weight: 600;
        color: #1e293b;
        margin: 0;
    }

    .asset-type-tag {
        background: #3b82f6;
        color: white;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .asset-card-body {
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 12px;
        flex-grow: 1;
    }

    .asset-detail {
        display: flex;
        justify-content: space-between;
        font-size: 15px;
    }

    .detail-label {
        color: #64748b;
    }

    .detail-value {
        font-weight: 500;
        color: #1e293b;
    }

    .return-value {
        color: #16a34a;
        font-weight: 500;
    }

    .empty-state {
        text-align: center;
        padding: 60px 28px;
        color: #64748b;
    }

    .empty-state h3 {
        margin-bottom: 12px;
        color: #475569;
        font-size: 18px;
    }

    .empty-state p {
        font-size: 16px;
    }

    .add-asset-btn {
        background: linear-gradient(135deg, #22c55e, #16a34a);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 20px;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.2s ease;
        white-space: nowrap;
    }

    .add-asset-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
    }

    .add-icon {
        font-size: 18px;
        font-weight: bold;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        padding: 20px;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 28px;
        border-bottom: 1px solid #e2e8f0;
    }

    .modal-header h3 {
        font-size: 20px;
        font-weight: 600;
        color: #1e293b;
        margin: 0;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 24px;
        color: #64748b;
        cursor: pointer;
        padding: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .close-btn:hover {
        background: #f1f5f9;
        color: #334155;
    }

    .modal-body {
        padding: 28px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        font-size: 14px;
        font-weight: 500;
        color: #374151;
        margin-bottom: 6px;
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 12px 14px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 15px;
        background: #f8fafc;
        transition: all 0.2s ease;
        box-sizing: border-box;
    }

    .form-group input:focus,
    .form-group select:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        background: white;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        padding: 20px 28px;
        border-top: 1px solid #e2e8f0;
    }

    .btn-secondary {
        background: #f8fafc;
        color: #64748b;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-secondary:hover {
        background: #f1f5f9;
        color: #475569;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .btn-primary:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    
</style>

@code {
    // Properties
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private string userName = "Utilizador";
    private string userRole = "";
    private string userInitials => GetUserInitials(userName);
    private bool showUserMenu = false;

    // Messages
    private string errorMessage = "";
    private string successMessage = "";

    // Asset Management
    private List<AtivoFinanceiroDto> assets = new List<AtivoFinanceiroDto>();
    private List<AtivoFinanceiroDto> filteredAssets = new List<AtivoFinanceiroDto>();
    private string searchTerm = "";
    private string selectedType = "";
    private string viewMode = "list";

    // Summary Statistics
    private decimal totalValue = 0;
    private decimal monthlyReturn = 0;
    private decimal monthlyIncome = 0;
    private int alerts = 0;

    // Modal for asset creation
    private bool showAddAssetModal = false;
    private bool isCreatingAsset = false;
    private AtivoFinanceiroDto newAsset = new AtivoFinanceiroDto();
    private DepositoDto depositoDetails = new DepositoDto();
    private FundoInvestimentoDto fundoDetails = new FundoInvestimentoDto();
    private ImovelArrendamentoDto imovelDetails = new ImovelArrendamentoDto();

    // Helper property for date handling
    private DateTime tempDataAquisicao = DateTime.Now;

    private void ClearError()
    {
        errorMessage = "";
        StateHasChanged();
    }

    private void ClearSuccess()
    {
        successMessage = "";
        StateHasChanged();
    }

    // Map UI type names to database type names
    private string MapTipoToDatabase(string uiTipo)
    {
        return uiTipo switch
        {
            "DepositoAPrazo" => "DepositoAPrazo",
            "FundoInvestimento" => "FundoInvestimento",
            "ImovelArrendamento" => "ImovelArrendado",
            _ => uiTipo
        };
    }

// Substitua o método CreateAsset() inteiro pelo seguinte:

    private async Task CreateAsset()
    {
        try
        {
            isCreatingAsset = true;
            ClearError();
            ClearSuccess();

            if (string.IsNullOrEmpty(newAsset.TipoAtivo))
            {
                errorMessage = "Tipo de ativo não selecionado";
                return;
            }

            Console.WriteLine($"🔄 Criando ativo: {newAsset.TipoAtivo} - Valor: {newAsset.ValorInvestido}");

            // Create the AtivosFinanceiros record using exact model structure
            var ativoFinanceiro = new Dictionary<string, object>
            {
                ["Id"] = Guid.NewGuid(),
                ["Tipo"] = MapTipoToDatabase(newAsset.TipoAtivo),
                ["DataInicio"] = DateOnly.FromDateTime(tempDataAquisicao),
                ["TaxaPercentagem"] = Math.Max(0.0, newAsset.TaxaPercentagem)
            };

            Console.WriteLine($"📤 Enviando AtivosFinanceiros:");
            Console.WriteLine($"   - Id: {ativoFinanceiro["Id"]}");
            Console.WriteLine($"   - Tipo: {ativoFinanceiro["Tipo"]}");
            Console.WriteLine($"   - DataInicio: {ativoFinanceiro["DataInicio"]}");
            Console.WriteLine($"   - TaxaPercentagem: {ativoFinanceiro["TaxaPercentagem"]}");

            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                Converters = { new DateOnlyJsonConverter() }
            };

            var jsonContent = JsonSerializer.Serialize(ativoFinanceiro, jsonOptions);
            Console.WriteLine($"📤 JSON enviado: {jsonContent}");

            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            var ativoResponse = await Http.PostAsync("http://localhost:5189/api/AtivosFinanceiros", content);

            if (!ativoResponse.IsSuccessStatusCode)
            {
                var ativoError = await ativoResponse.Content.ReadAsStringAsync();
                errorMessage = $"Erro ao criar ativo financeiro: {ativoError}";
                Console.WriteLine($"❌ Erro AtivosFinanceiros: {ativoError}");
                return;
            }

            var responseContent = await ativoResponse.Content.ReadAsStringAsync();
            Console.WriteLine($"✅ Resposta da API: {responseContent}");

            var createdAtivoFinanceiro = JsonSerializer.Deserialize<JsonElement>(responseContent);
            var ativoFinanceiroId = createdAtivoFinanceiro.GetProperty("id").GetGuid();
            Console.WriteLine($"✅ AtivosFinanceiros criado com ID: {ativoFinanceiroId}");


            Console.WriteLine($"✅ AtivosFinanceiros criado com ID: {ativoFinanceiroId}");

            // Now create the specific asset with the AtivoId reference
            string createdAssetId = "";
            switch (newAsset.TipoAtivo)
            {
                case "DepositoAPrazo":
                    createdAssetId = await CreateDeposito(ativoFinanceiroId);
                    break;
                case "FundoInvestimento":
                    createdAssetId = await CreateFundoInvestimento(ativoFinanceiroId);
                    break;
                case "ImovelArrendamento":
                    createdAssetId = await CreateImovelArrendamento(ativoFinanceiroId);
                    break;
                default:
                    errorMessage = $"Tipo de ativo não suportado: {newAsset.TipoAtivo}";
                    return;
            }

            if (string.IsNullOrEmpty(createdAssetId))
            {
                errorMessage = "Falha ao criar o ativo específico";
                return;
            }

            // Finally, create the portfolio entry (Carteira)
            var carteira = new Dictionary<string, object>
            {
                ["Id"] = Guid.NewGuid(),
                ["UtilizadorId"] = UserStateService.UserId,
                ["AtivoId"] = ativoFinanceiroId,
                ["DataInicio"] = DateOnly.FromDateTime(tempDataAquisicao),
                ["Montante"] = newAsset.ValorInvestido
            };

            var carteiraJsonContent = JsonSerializer.Serialize(carteira, jsonOptions);
            var carteiraContent = new StringContent(carteiraJsonContent, System.Text.Encoding.UTF8, "application/json");
            var carteiraResponse = await Http.PostAsync("http://localhost:5189/api/Carteira", carteiraContent);

            if (carteiraResponse.IsSuccessStatusCode)
            {
                successMessage = "Ativo criado com sucesso!";
                await LoadPortfolioData();
                CalculateSummaryStatistics();
                filteredAssets = new List<AtivoFinanceiroDto>(assets);
                HideAddAssetModal();
            }
            else
            {
                var carteiraError = await carteiraResponse.Content.ReadAsStringAsync();
                errorMessage = $"Erro ao adicionar ativo à carteira: {carteiraError}";
                Console.WriteLine($"❌ Erro Carteira: {carteiraError}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro inesperado: {ex.Message}";
            Console.WriteLine($"❌ Erro ao criar ativo: {ex.Message}");
            Console.WriteLine($"❌ Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isCreatingAsset = false;
            StateHasChanged();
        }
    }

    private async Task<string> CreateDeposito(Guid ativoId)
    {
        try
        {
            // Corresponde exatamente ao modelo Deposito
            var deposito = new Dictionary<string, object>
            {
                ["Id"] = Guid.NewGuid(),
                ["AtivoId"] = ativoId, // Guid? no modelo
                ["Montante"] = newAsset.ValorInvestido,
                ["Banco"] = string.IsNullOrWhiteSpace(depositoDetails.Banco) ? "Banco Padrão" : depositoDetails.Banco,
                ["NumeroConta"] = string.IsNullOrWhiteSpace(depositoDetails.NumeroConta) ? "000000000" : depositoDetails.NumeroConta,
                ["TaxaJuros"] = newAsset.TaxaPercentagem,
                ["Titulares"] = new List<string> { userName }
            };

            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

            var jsonContent = JsonSerializer.Serialize(deposito, jsonOptions);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("http://localhost:5189/api/Deposito", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var created = JsonSerializer.Deserialize<JsonElement>(responseContent);
                return created.GetProperty("id").GetString() ?? "";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erro ao criar depósito: {error}";
                Console.WriteLine($"❌ Erro Deposito: {error}");
                return "";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao criar depósito: {ex.Message}";
            Console.WriteLine($"❌ Exception Deposito: {ex.Message}");
            return "";
        }
    }

    private async Task<string> CreateFundoInvestimento(Guid ativoId)
    {
        try
        {
            // Corresponde exatamente ao modelo FundosInvestimento
            var fundo = new Dictionary<string, object>
            {
                ["Id"] = Guid.NewGuid(),
                ["AtivoId"] = ativoId, // Guid? no modelo
                ["Nome"] = string.IsNullOrWhiteSpace(fundoDetails.Nome) ? "Fundo de Investimento" : fundoDetails.Nome,
                ["MontanteInvestido"] = newAsset.ValorInvestido,
                ["DuracaoMeses"] = fundoDetails.DuracaoMeses > 0 ? fundoDetails.DuracaoMeses : 12,
                ["TaxaJurosPadrao"] = newAsset.TaxaPercentagem
            };

            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

            var jsonContent = JsonSerializer.Serialize(fundo, jsonOptions);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("http://localhost:5189/api/FundosInvestimentos", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var created = JsonSerializer.Deserialize<JsonElement>(responseContent);
                return created.GetProperty("id").GetString() ?? "";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erro ao criar fundo de investimento: {error}";
                Console.WriteLine($"❌ Erro FundoInvestimento: {error}");
                return "";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao criar fundo de investimento: {ex.Message}";
            Console.WriteLine($"❌ Exception FundoInvestimento: {ex.Message}");
            return "";
        }
    }

    private async Task<string> CreateImovelArrendamento(Guid ativoId)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(imovelDetails.Designacao))
            {
                errorMessage = "Designação do imóvel é obrigatória";
                return "";
            }

            if (imovelDetails.ValorRenda <= 0)
            {
                errorMessage = "Valor da renda deve ser maior que zero";
                return "";
            }

            // Corresponde exatamente ao modelo ImoveisArrendamento
            var imovel = new Dictionary<string, object>
            {
                ["Id"] = Guid.NewGuid(),
                ["AtivoId"] = ativoId, // Guid? no modelo
                ["Designacao"] = imovelDetails.Designacao.Trim(),
                ["LocalizacaoId"] = (Guid?)null, // Guid? no modelo
                ["ValorPropriedade"] = newAsset.ValorInvestido,
                ["ValorRenda"] = imovelDetails.ValorRenda,
                ["TaxaCondominio"] = imovelDetails.TaxaCondominio,
                ["DespesasAnuais"] = imovelDetails.DespesasAnuais,
                ["PercentagemPropriedade"] = imovelDetails.PercentagemPropriedade > 0 ? imovelDetails.PercentagemPropriedade : 100
            };

            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };

            var jsonContent = JsonSerializer.Serialize(imovel, jsonOptions);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("http://localhost:5189/api/ImoveisArrendamento", content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var created = JsonSerializer.Deserialize<JsonElement>(responseContent);
                return created.GetProperty("id").GetString() ?? "";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erro ao criar imóvel: {error}";
                Console.WriteLine($"❌ Erro Imovel: {error}");
                return "";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao criar imóvel: {ex.Message}";
            Console.WriteLine($"❌ Exception Imovel: {ex.Message}");
            return "";
        }
    }

    private string GetUserInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "U";
        return string.Join("", name.Split(' ', StringSplitOptions.RemoveEmptyEntries)
            .Select(n => char.ToUpper(n[0])));
    }

    private void HideAddAssetModal()
    {
        showAddAssetModal = false;
        ClearError();
        ClearSuccess();
    }

    private async Task LoadPortfolioData()
    {
        try
        {
            Console.WriteLine("🔄 Carregando dados da carteira...");

            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new DateOnlyJsonConverter() }
            };

            var carteiraResponse = await Http.GetAsync($"http://localhost:5189/api/Carteira");

            if (carteiraResponse.IsSuccessStatusCode)
            {
                var jsonString = await carteiraResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"📄 Raw JSON response: {jsonString}");

                var carteiraItems = JsonSerializer.Deserialize<List<CarteiraDto>>(jsonString, jsonOptions) ?? new List<CarteiraDto>();

                var userCarteira = carteiraItems.Where(c => c.UtilizadorId == UserStateService.UserId).ToList();

                assets = userCarteira.Select(c => new AtivoFinanceiroDto
                {
                    id = c.Id.ToString(),
                    UtilizadorId = c.UtilizadorId ?? Guid.Empty,
                    AtivoId = c.AtivoId?.ToString() ?? "",
                    TipoAtivo = "Unknown",
                    DataAquisicao = c.DataInicio,
                    ValorInvestido = c.Montante,
                    TaxaPercentagem = 0
                }).ToList();

                Console.WriteLine($"✅ Carregados {assets.Count} ativos da carteira");
            }
            else
            {
                Console.WriteLine($"⚠️ API de Carteira retornou status: {carteiraResponse.StatusCode}");
                assets = new List<AtivoFinanceiroDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erro ao carregar dados da carteira: {ex.Message}");
            assets = new List<AtivoFinanceiroDto>();
        }
    }

    private void CalculateSummaryStatistics()
    {
        totalValue = assets?.Sum(a => (decimal)a.ValorInvestido) ?? 0;
        monthlyIncome = assets?.Sum(a => (decimal)a.ValorInvestido * (decimal)a.TaxaPercentagem / 100 / 12) ?? 0;

        if (totalValue > 0 && assets != null && assets.Any())
        {
            monthlyReturn = assets.Sum(a => (decimal)a.ValorInvestido * (decimal)a.TaxaPercentagem) / totalValue;
        }

        alerts = 0;
    }

    private bool ValidateAuthentication()
    {
        try
        {
            if (UserStateService == null)
            {
                Console.WriteLine("❌ UserStateService é null");
                return false;
            }

            if (UserStateService.UserId == Guid.Empty)
            {
                Console.WriteLine("❌ UserId está vazio");
                return false;
            }

            Console.WriteLine($"✅ Usuário autenticado com ID: {UserStateService.UserId}");
            isAuthenticated = true;
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erro na validação de autenticação: {ex.Message}");
            return false;
        }
    }

    private void RedirectToLogin()
    {
        try
        {
            Console.WriteLine("🔄 Redirecionando para login...");
            isAuthenticated = false;
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erro ao redirecionar para login: {ex.Message}");
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task<bool> LoadUserDataSafely()
    {
        try
        {
            Console.WriteLine($"🔄 Fazendo requisição para API: /api/Utilizadore/{UserStateService.UserId}");

            var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");

            Console.WriteLine($"📡 Resposta da API: {response.StatusCode}");

            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                Console.WriteLine("❌ API retornou 401 - Token inválido ou expirado");
                return false;
            }

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"❌ API retornou erro: {response.StatusCode} - {response.ReasonPhrase}");
                return false;
            }

            var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
            if (user != null)
            {
                userName = user.Nome ?? "Utilizador";
                userRole = user.Cargo ?? "Utilizador";
                Console.WriteLine($"✅ Dados do usuário carregados: Nome={userName}, Cargo={userRole}");
                return true;
            }
            else
            {
                Console.WriteLine("❌ Resposta da API não contém dados do usuário");
                return false;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"❌ Erro de rede ao carregar dados do usuário: {ex.Message}");
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erro inesperado ao carregar dados do usuário: {ex.Message}");
            return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("🔄 Iniciando carregamento da página portfolio...");

            if (!ValidateAuthentication())
            {
                Console.WriteLine("❌ Falha na validação de autenticação");
                isLoading = false;
                return;
            }

            Console.WriteLine("✅ Usuário autenticado, carregando dados...");

            var userDataLoaded = await LoadUserDataSafely();

            if (!userDataLoaded)
            {
                Console.WriteLine("❌ Falha ao carregar dados do usuário, redirecionando para login");
                RedirectToLogin();
                return;
            }

            Console.WriteLine($"✅ Dados do usuário carregados: {userName}, Cargo: {userRole}");

            if (userRole == "Administrador")
            {
                Console.WriteLine("🔄 Administrador detectado, redirecionando para relatórios...");
                NavigationManager.NavigateTo("/reports", forceLoad: true);
                return;
            }

            await LoadPortfolioData();
            CalculateSummaryStatistics();
            filteredAssets = new List<AtivoFinanceiroDto>(assets);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erro durante inicialização: {ex.Message}");
            Console.WriteLine($"❌ Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddAssetModal()
    {
        tempDataAquisicao = DateTime.Now;
        newAsset = new AtivoFinanceiroDto
        {
            UtilizadorId = UserStateService.UserId,
            DataAquisicao = DateOnly.FromDateTime(tempDataAquisicao),
            ValorInvestido = 0,
            TaxaPercentagem = 0
        };
        depositoDetails = new DepositoDto();
        fundoDetails = new FundoInvestimentoDto();
        imovelDetails = new ImovelArrendamentoDto
        {
            Designacao = "",
            Morada = "",
            ValorRenda = 0,
            TaxaCondominio = 0,
            DespesasAnuais = 0,
            PercentagemPropriedade = 100
        };
        showAddAssetModal = true;
        ClearError();
        ClearSuccess();
    }

    private void OnDateChanged()
    {
        newAsset.DataAquisicao = DateOnly.FromDateTime(tempDataAquisicao);
    }

    private void OnAssetTypeChange()
    {
        StateHasChanged();
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private void Logout()
    {
        try
        {
            UserStateService.UserId = Guid.Empty;
            isAuthenticated = false;
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Erro durante logout: {ex.Message}");
            NavigationManager.NavigateTo("/");
        }
    }

    private void SearchAssets()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredAssets = new List<AtivoFinanceiroDto>(assets ?? new List<AtivoFinanceiroDto>());
        }
        else
        {
            filteredAssets = (assets ?? new List<AtivoFinanceiroDto>())
                .Where(
                    a => GetAssetDisplayName(a).Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                         a.TipoAtivo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                ).ToList();
        }

        ApplyFilters();
    }

    private void FilterByType()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filtered = assets ?? new List<AtivoFinanceiroDto>();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(
                a => GetAssetDisplayName(a).Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     a.TipoAtivo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }

        if (!string.IsNullOrEmpty(selectedType))
        {
            filtered = filtered.Where(a => a.TipoAtivo == selectedType).ToList();
        }

        filteredAssets = filtered;
        StateHasChanged();
    }

    private string GetAssetDisplayName(AtivoFinanceiroDto asset)
    {
        return asset.TipoAtivo switch
        {
            "DepositoAPrazo" => $"Depósito {asset.AtivoId}",
            "FundoInvestimento" => $"Fundo {asset.AtivoId}",
            "ImovelArrendamento" => $"Imóvel {asset.AtivoId}",
            "ImovelArrendado" => $"Imóvel {asset.AtivoId}",
            _ => $"Ativo {asset.AtivoId}"
        };
    }

    private string GetAssetTypeName(string tipoAtivo)
    {
        return tipoAtivo switch
        {
            "DepositoAPrazo" => "Depósito a Prazo",
            "FundoInvestimento" => "Fundo de Investimento",
            "ImovelArrendamento" => "Imóvel Arrendado",
            "ImovelArrendado" => "Imóvel Arrendado",
            _ => tipoAtivo
        };
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", new CultureInfo("pt-PT"));
    }

    private string FormatPercentage(decimal value)
    {
        return $"{value:F1}%";
    }

    private bool IsFormValid()
    {
        if (string.IsNullOrEmpty(newAsset.TipoAtivo)) return false;
        if (newAsset.ValorInvestido <= 0) return false;
        if (newAsset.TaxaPercentagem < 0) return false;

        switch (newAsset.TipoAtivo)
        {
            case "DepositoAPrazo":
                return true;
            case "FundoInvestimento":
                return !string.IsNullOrWhiteSpace(fundoDetails.Nome);
            case "ImovelArrendamento":
                return !string.IsNullOrWhiteSpace(imovelDetails.Designacao) &&
                       imovelDetails.ValorRenda > 0;
            default:
                return false;
        }
    }

    // DTO Classes for Create operations
    public class AtivosFinanceirosCreateDto
    {
        public Guid Id { get; set; }
        public string Tipo { get; set; } = "";
        public DateOnly DataInicio { get; set; }
        public double TaxaPercentagem { get; set; }
    }

    public class CarteiraCreateDto
    {
        public Guid Id { get; set; }
        public Guid UtilizadorId { get; set; }
        public Guid AtivoId { get; set; }
        public DateOnly DataInicio { get; set; }
        public double Montante { get; set; }
    }

    public class DepositoCreateDto
    {
        public Guid Id { get; set; }
        public Guid AtivoId { get; set; }
        public double Montante { get; set; }
        public string Banco { get; set; } = "";
        public string NumeroConta { get; set; } = "";
        public double TaxaJuros { get; set; }
        public List<string> Titulares { get; set; } = new List<string>();
    }

    public class FundoInvestimentoCreateDto
    {
        public Guid Id { get; set; }
        public Guid AtivoId { get; set; }
        public string Nome { get; set; } = "";
        public double MontanteInvestido { get; set; }
        public int DuracaoMeses { get; set; }
        public double TaxaJurosPadrao { get; set; }
    }

    public class ImovelArrendamentoCreateDto
    {
        public Guid Id { get; set; }
        public Guid AtivoId { get; set; }
        public string Designacao { get; set; } = "";
        public Guid? LocalizacaoId { get; set; }
        public double ValorPropriedade { get; set; }
        public double ValorRenda { get; set; }
        public double TaxaCondominio { get; set; }
        public double DespesasAnuais { get; set; }
        public double PercentagemPropriedade { get; set; }
    }

    // DTO Classes for Display
    public class UtilizadoreDto
    {
        public Guid Id { get; set; }
        public string Nome { get; set; } = "";
        public string Email { get; set; } = "";
        public string Cargo { get; set; } = "";
    }

    public class CarteiraDto
    {
        public Guid Id { get; set; }
        public Guid? UtilizadorId { get; set; }
        public Guid? AtivoId { get; set; }

        [JsonConverter(typeof(DateOnlyJsonConverter))]
        public DateOnly DataInicio { get; set; }
        public double Montante { get; set; }
    }

    public class DepositoDto
    {
        public string id { get; set; } = string.Empty;
        public string tipo { get; set; } = string.Empty;
        public DateTime dataInicio { get; set; }
        public double taxaPercentagem { get; set; }
        public double Montante { get; set; }
        public string Banco { get; set; } = string.Empty;
        public string NumeroConta { get; set; } = string.Empty;
        public double TaxaJuros { get; set; }
        public List<string> Titulares { get; set; } = new List<string>();
    }

    public class FundoInvestimentoDto
    {
        public string id { get; set; } = string.Empty;
        public string tipo { get; set; } = string.Empty;
        public DateTime dataInicio { get; set; }
        public double taxaPercentagem { get; set; }
        public string Nome { get; set; } = string.Empty;
        public double MontanteInvestido { get; set; }
        public int DuracaoMeses { get; set; }
        public double TaxaJurosPadrao { get; set; }
    }

    public class ImovelArrendamentoDto
    {
        public string id { get; set; } = string.Empty;
        public string tipo { get; set; } = string.Empty;
        public DateTime dataInicio { get; set; }
        public double taxaPercentagem { get; set; }
        public string Designacao { get; set; } = string.Empty;
        public double ValorPropriedade { get; set; }
        public double ValorRenda { get; set; }
        public double TaxaCondominio { get; set; }
        public double DespesasAnuais { get; set; }
        public double PercentagemPropriedade { get; set; }
        public string? Morada { get; set; } = string.Empty;
    }

    public class AtivoFinanceiroDto
    {
        public string id { get; set; } = string.Empty;
        public Guid UtilizadorId { get; set; }
        public string AtivoId { get; set; } = string.Empty;
        public string TipoAtivo { get; set; } = string.Empty;
        public DateOnly DataAquisicao { get; set; }
        public double ValorInvestido { get; set; }
        public double TaxaPercentagem { get; set; }
    }

    public class DateOnlyJsonConverter : JsonConverter<DateOnly>
    {
        private const string DateFormat = "yyyy-MM-dd";

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.String)
            {
                var stringValue = reader.GetString();
                if (DateTime.TryParse(stringValue, out var dateTime))
                {
                    return DateOnly.FromDateTime(dateTime);
                }
            }
            else if (reader.TokenType == JsonTokenType.StartObject)
            {
                var jsonDoc = JsonDocument.ParseValue(ref reader);
                if (jsonDoc.RootElement.TryGetProperty("year", out var yearElement) &&
                    jsonDoc.RootElement.TryGetProperty("month", out var monthElement) &&
                    jsonDoc.RootElement.TryGetProperty("day", out var dayElement))
                {
                    return new DateOnly(yearElement.GetInt32(), monthElement.GetInt32(), dayElement.GetInt32());
                }
            }

            throw new JsonException($"Unable to convert JSON to DateOnly. Token type: {reader.TokenType}");
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString(DateFormat));
        }
    }
}