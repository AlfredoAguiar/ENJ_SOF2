@page "/profile"
@using WebApplication5.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService UserStateService

<div class="app-container">
    <!-- Sidebar Navigation -->
     <div class="sidebar">
            <div class="sidebar-header">
                <h2>Gestão Ativos</h2>
            </div>
            <nav class="sidebar-nav">
                @if (userRole == "Utilizador")
                {
                    <!-- Regular Users: Dashboard, Portfolio, Transactions -->
                    <a href="/main" class="nav-item @(NavigationManager.Uri.EndsWith("/main") ? "active" : "")">
                        <div class="nav-icon dashboard-nav-icon"></div>
                        <span>Dashboard</span>
                    </a>
                    <a href="/portfolio" class="nav-item @(NavigationManager.Uri.EndsWith("/portfolio") ? "active" : "")">
                        <div class="nav-icon portfolio-nav-icon"></div>
                        <span>Carteira</span>
                    </a>
                    <a href="/transactions" class="nav-item @(NavigationManager.Uri.EndsWith("/transactions") ? "active" : "")">
                        <div class="nav-icon transactions-nav-icon"></div>
                        <span>Transações</span>
                    </a>
                }
                else if (userRole == "GestorUtilizadores")
                {
                    <!-- Asset Managers: Dashboard, Portfolio, Transactions, Reports -->
                    <a href="/main" class="nav-item @(NavigationManager.Uri.EndsWith("/main") ? "active" : "")">
                        <div class="nav-icon dashboard-nav-icon"></div>
                        <span>Dashboard</span>
                    </a>
                    <a href="/portfolio" class="nav-item @(NavigationManager.Uri.EndsWith("/portfolio") ? "active" : "")">
                        <div class="nav-icon portfolio-nav-icon"></div>
                        <span>Carteira</span>
                    </a>
                    <a href="/transactions" class="nav-item @(NavigationManager.Uri.EndsWith("/transactions") ? "active" : "")">
                        <div class="nav-icon transactions-nav-icon"></div>
                        <span>Transações</span>
                    </a>
                    <a href="/reports" class="nav-item @(NavigationManager.Uri.EndsWith("/reports") ? "active" : "")">
                        <div class="nav-icon reports-nav-icon"></div>
                        <span>Relatórios</span>
                    </a>
                }
            </nav>
            <div class="sidebar-footer">
                <a href="javascript:void(0)" @onclick="Logout" class="nav-item logout">
                    <div class="nav-icon logout-nav-icon"></div>
                    <span>Sair</span>
                </a>
            </div>
        </div>

    <!-- Main Content -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <p>Carregando perfil...</p>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-container">
                <div class="alert-error">
                    <span class="alert-icon">!</span>
                    <span>@errorMessage</span>
                </div>
                <button @onclick="LoadUserProfile" class="retry-button">Tentar Novamente</button>
            </div>
        }
        else if (userProfile != null)
        {
            <!-- Top Header with Breadcrumbs -->
            <div class="page-header">
                <div class="breadcrumbs">
                    <a href="/main">Dashboard</a>
                    <span class="separator">/</span>
                    <span class="current">Meu Perfil</span>
                </div>
                <div class="user-profile">
                    <span class="user-greeting">Olá, <strong>@userProfile.Name</strong></span>
                    <button class="user-menu-button" @onclick="ToggleUserMenu">
                        <div class="avatar">@userInitials</div>
                        @if (showUserMenu)
                        {
                            <div class="user-menu">
                                <a href="/profile" class="user-menu-item">Meu Perfil</a>
                                <a href="javascript:void(0)" @onclick="Logout" class="user-menu-item logout">Sair</a>
                            </div>
                        }
                    </button>
                </div>
            </div>

            <!-- Page Title -->
            <div class="page-title-actions">
                <h1>Meu Perfil</h1>
            </div>

            <!-- Profile Overview -->
            <div class="profile-overview">
                <div class="profile-avatar">
                    <div class="avatar-large">@userInitials</div>
                </div>
                <div class="profile-info">
                    <h2>@userProfile.Name</h2>
                    <p class="profile-role">@GetRoleDisplayName(userProfile.Role)</p>
                    <p class="profile-member-since">ID: @userProfile.Id.ToString("N")[..8]...</p>
                </div>
            </div>

            <!-- Personal Information -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Informações Pessoais</h2>
                </div>
                <div class="personal-info">
                    <div class="info-group">
                        <label>Nome Completo</label>
                        <p>@userProfile.Name</p>
                    </div>
                    <div class="info-group">
                        <label>Email</label>
                        <p>@userProfile.Email</p>
                    </div>
                    <div class="info-group">
                        <label>Cargo</label>
                        <p>@GetRoleDisplayName(userProfile.Role)</p>
                    </div>
                    <div class="info-group">
                        <label>ID do Utilizador</label>
                        <p>@userProfile.Id</p>
                    </div>
                    @if (userProfile.PermissaoId.HasValue)
                    {
                        <div class="info-group">
                            <label>ID da Permissão</label>
                            <p>@userProfile.PermissaoId</p>
                        </div>
                    }
                </div>
                
                <!-- Security Section -->
                <div class="security-section">
                    <div class="section-header">
                        <div class="header-content">
                            <div class="header-icon">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 1l3.09 6.26L22 9l-5 4.87L18.18 21 12 17.77 5.82 21 7 13.87 2 9l6.91-1.74L12 1z"/>
                                </svg>
                            </div>
                            <div class="header-text">
                                <h2>Segurança</h2>
                                <span class="header-subtitle">Mantenha sua conta protegida</span>
                            </div>
                        </div>
                        <button class="edit-button" @onclick="NavigateToChangePassword">
                            <span class="password-icon"></span>
                            Alterar Senha
                        </button>
                    </div>

                    <div class="security-info">
                        <div class="security-cards">
                            <div class="security-card recommendation">
                                <div class="card-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                    </svg>
                                </div>
                                <div class="card-content">
                                    <h4>Recomendação de Segurança</h4>
                                    <p>A sua senha deve ser alterada regularmente para maior segurança.</p>
                                </div>
                            </div>

                            <div class="security-card warning">
                                <div class="card-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/>
                                    </svg>
                                </div>
                                <div class="card-content">
                                    <h4>Importante</h4>
                                    <p>Mantenha suas credenciais seguras e não as compartilhe com terceiros.</p>
                                </div>
                            </div>

                            <div class="security-card info">
                                <div class="card-icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                                    </svg>
                                </div>
                                <div class="card-content">
                                    <h4>Última Alteração</h4>
                                    <p class="unavailable-info">Informação não disponível</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Account Information -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Informações da Conta</h2>
                </div>
                <div class="account-info">
                    <!-- Status e Tipo em Cards Separados -->
                    <div class="account-status-row">
                        <div class="status-card">
                            <div class="status-icon">
                                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                            <div class="status-content">
                                <label>Status da Conta</label>
                                <span class="status-badge active">Ativa</span>
                            </div>
                        </div>

                        <div class="user-type-card">
                            <div class="user-icon">
                                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                            <div class="user-content">
                                <label>Tipo de Utilizador</label>
                                <span class="user-type">@GetRoleDisplayName(userProfile.Role)</span>
                            </div>
                        </div>
                    </div>

                    <!-- Informações Temporais -->
                    <div class="temporal-info">
                        <div class="info-card">
                            <div class="info-icon">
                                <svg width="18" height="18" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                            <div class="info-content">
                                <label>Data de Criação</label>
                                <span class="unavailable">Informação não disponível</span>
                            </div>
                        </div>

                        <div class="info-card">
                            <div class="info-icon">
                                <svg width="18" height="18" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
                                </svg>
                            </div>
                            <div class="info-content">
                                <label>Último Acesso</label>
                                <span class="datetime">@DateTime.Now.ToString("dd/MM/yyyy HH:mm")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<style>
    /* Global App Container */
    .app-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8fafc;
        color: #334155;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 250px;
        background: linear-gradient(180deg, #1e293b 0%, #0f172a 100%);
        color: white;
        padding: 20px;
        display: flex;
        flex-direction: column;
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        height: 100vh;
    }

    .sidebar-header {
        margin-bottom: 30px;
        text-align: center;
    }

    .sidebar-header h2 {
        font-size: 24px;
        font-weight: 700;
        color: #e2e8f0;
    }

    .sidebar-nav {
        flex-grow: 1;
    }

    .nav-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        margin-bottom: 10px;
        border-radius: 8px;
        color: #cbd5e1;
        text-decoration: none;
        transition: background-color 0.2s, color 0.2s;
    }

    .nav-item:hover {
        background-color: #334155;
        color: white;
    }

    .nav-item.active {
        background-color: #3b82f6;
        color: white;
        font-weight: 600;
        box-shadow: 0 4px 10px rgba(59, 130, 246, 0.3);
    }

    .nav-icon {
        width: 24px;
        height: 24px;
        margin-right: 12px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
        filter: invert(1); /* Adjust for light icons on dark background */
    }

    /* Specific icons - replace with actual SVG/icon font if available */
    .dashboard-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>'); }
    .portfolio-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 12V8H6a2 2 0 0 1-2-2c0-1.1.9-2 2-2h12v4"></path><path d="M4 6v12c0 1.1.9 2 2 2h14v-4"></path><path d="M18 12a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2v-4h-2Z"></path></svg>'); }
    .transactions-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>'); }
    .reports-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><line x1="10" y1="9" x2="8" y2="9"></line></svg>'); }
    .logout-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>'); }
    .users-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>'); }
    .profile-nav-icon { background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>'); }


    .sidebar-footer {
        margin-top: auto; /* Pushes the footer to the bottom */
        padding-top: 20px;
        border-top: 1px solid #334155;
    }

    /* Main Content Area */
    .main-content {
        flex-grow: 1;
        padding: 20px;
        overflow-y: auto; /* Allows scrolling within the main content */
    }

    /* Loading Styles */
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .loading-spinner {
        text-align: center;
        padding: 2rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    }

    .loading-spinner::after {
        content: "";
        display: block;
        width: 40px;
        height: 40px;
        margin: 20px auto;
        border-radius: 50%;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        animation: spin 1s linear infinite;
    }
    
    .loading-spinner p {
        margin: 0;
        color: #333;
        font-weight: 600;
        font-size: 1.1rem;
    }

    /* Error Container */
    .error-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        padding: 20px;
        text-align: center;
    }

    .alert-error {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 1px solid #f1b0b7;
        border-left: 4px solid #dc3545;
        color: #721c24;
        padding: 16px 20px;
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.15);
        display: flex;
        align-items: center;
        max-width: 500px;
        width: 100%;
    }

    .alert-icon {
        font-size: 18px;
        font-weight: bold;
        margin-right: 12px;
        min-width: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        flex-shrink: 0;
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border: 2px solid rgba(220, 53, 69, 0.2);
    }

    .alert-error span:not(.alert-icon) {
        font-weight: 500;
        font-size: 14px;
        line-height: 1.4;
        flex: 1;
    }

    .retry-button {
        margin-top: 1.5rem;
        padding: 1rem 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .retry-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
    }

    /* Page Header */
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
    }

    .breadcrumbs {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #64748b;
    }

    .breadcrumbs a {
        color: #3b82f6;
        text-decoration: none;
        font-weight: 500;
    }

    .breadcrumbs a:hover {
        text-decoration: underline;
    }

    .breadcrumbs .separator {
        margin: 0 8px;
        color: #cbd5e1;
    }

    .breadcrumbs .current {
        font-weight: 600;
        color: #1e293b;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 12px;
        position: relative;
    }

    .user-greeting {
        font-size: 16px;
        color: #64748b;
    }

    .avatar {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 18px;
        cursor: pointer;
    }

    .user-menu {
        position: absolute;
        right: 0;
        top: 60px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 200px;
        z-index: 100;
        overflow: hidden;
    }

    .user-menu-item {
        display: block;
        padding: 12px 16px;
        color: #334155;
        text-decoration: none;
        border-bottom: 1px solid #e2e8f0;
    }

    .user-menu-item:hover {
        background-color: #f8fafc;
    }

    .user-menu-item.logout {
        color: #e53e3e;
    }

    /* Page Title and Actions */
    .page-title-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
    }

    .page-title-actions h1 {
        font-size: 32px;
        font-weight: 700;
        color: #1e293b;
        margin: 0;
    }

    /* Profile Overview */
    .profile-overview {
        display: flex;
        align-items: center;
        gap: 24px;
        background: white;
        border-radius: 16px;
        padding: 28px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 32px;
        border: 1px solid #e5e7eb;
    }

    .profile-avatar {
        flex-shrink: 0;
    }

    .avatar-large {
        width: 96px;
        height: 96px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 700;
        font-size: 40px;
    }

    .profile-info {
        flex-grow: 1;
    }

    .profile-info h2 {
        font-size: 28px;
        font-weight: 700;
        color: #1e293b;
        margin: 0 0 8px 0;
    }

    .profile-role {
        font-size: 16px;
        color: #64748b;
        margin-bottom: 8px;
    }

    .profile-member-since {
        font-size: 14px;
        color: #94a3b8;
    }

    /* Personal Information */
    .dashboard-section {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 24px;
        overflow: hidden;
        border: 1px solid #e5e7eb;
    }

    .section-header {
        padding: 24px 28px;
        border-bottom: 1px solid #f1f3f4;
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    }

    .section-header h2 {
        margin: 0;
        font-size: 1.375rem;
        font-weight: 700;
        color: #1e293b;
    }

    .personal-info {
        padding: 28px;
        display: grid;
        grid-template-columns: 1fr;
        gap: 20px;
    }



    .info-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .info-group label {
        font-size: 14px;
        font-weight: 600;
        color: #64748b;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .info-group p {
        font-size: 16px;
        color: #1e293b;
        margin: 0;
    }

    /* Seção de Segurança */
    .security-section {
        background: #ffffff;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        margin-bottom: 24px;
        overflow: hidden;
        border: 1px solid #e5e7eb;
    }

    /* Header da Seção */
    .security-section .section-header { /* Specificity for security section header */
        padding: 24px 28px;
        border-bottom: 1px solid #f1f3f4;
        background: linear-gradient(135deg, #fef3e2 0%, #fed7aa 100%);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .header-icon {
        width: 48px;
        height: 48px;
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        box-shadow: 0 4px 8px rgba(245, 158, 11, 0.3);
    }

    .header-text h2 {
        margin: 0 0 4px 0;
        font-size: 1.375rem;
        font-weight: 700;
        color: #92400e;
    }

    .header-subtitle {
        font-size: 0.875rem;
        color: #a16207;
        font-weight: 500;
    }

    .edit-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 10px 18px;
        border-radius: 6px;
        font-size: 15px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        text-decoration: none;
        border: none;
        background: #3b82f6;
        color: white;
    }

    .edit-button:hover {
        background: #2563eb;
    }

    .password-icon {
        width: 20px;
        height: 20px;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>');
        background-size: contain;
        background-repeat: no-repeat;
        filter: invert(1);
    }

    /* Área de Informações de Segurança */
    .security-info {
        padding: 28px;
    }

    .security-cards {
        display: grid;
        grid-template-columns: 1fr;
        gap: 16px;
    }

    .security-card {
        display: flex;
        align-items: flex-start;
        gap: 16px;
        padding: 20px;
        border-radius: 12px;
        border: 2px solid;
        transition: all 0.2s ease;
    }

    .security-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* Card de Recomendação */
    .security-card.recommendation {
        background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
        border-color: #86efac;
    }

    .security-card.recommendation .card-icon {
        width: 40px;
        height: 40px;
        background: #16a34a;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        flex-shrink: 0;
    }

    /* Card de Aviso */
    .security-card.warning {
        background: linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%);
        border-color: #fcd34d;
    }

    .security-card.warning .card-icon {
        width: 40px;
        height: 40px;
        background: #f59e0b;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        flex-shrink: 0;
    }

    /* Card de Informação */
    .security-card.info {
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        border-color: #7dd3fc;
    }

    .security-card.info .card-icon {
        width: 40px;
        height: 40px;
        background: #0ea5e9;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        flex-shrink: 0;
    }

    /* Conteúdo dos Cards */
    .card-content {
        flex: 1;
    }

    .card-content h4 {
        margin: 0 0 8px 0;
        font-size: 1rem;
        font-weight: 600;
        color: #1f2937;
    }

    .card-content p {
        margin: 0;
        font-size: 0.9375rem;
        line-height: 1.5;
        color: #4b5563;
    }

    .unavailable-info {
        color: #9ca3af !important;
        font-style: italic;
    }
    
    /* Account Information */
    .account-info {
        padding: 28px;
    }

    /* Status Row - Cards Principais */
    .account-status-row {
        display: grid;
        grid-template-columns: 1fr; /* Default to single column on small screens */
        gap: 20px;
        margin-bottom: 24px;
    }


    .status-card, .user-type-card {
        display: flex;
        align-items: center;
        gap: 16px;
        padding: 20px;
        background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        border-radius: 12px;
        border: 2px solid #bbf7d0;
        box-shadow: 0 2px 8px rgba(34, 197, 94, 0.1);
    }

    .user-type-card {
        background: linear-gradient(135deg, #fef7ff 0%, #f3e8ff 100%);
        border-color: #d8b4fe;
        box-shadow: 0 2px 8px rgba(147, 51, 234, 0.1);
    }

    .status-icon, .user-icon {
        width: 44px;
        height: 44px;
        background: #16a34a;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        flex-shrink: 0;
    }

    .user-icon {
        background: #7c3aed;
    }

    .status-content, .user-content {
        flex: 1;
    }

    .status-content label, .user-content label {
        display: block;
        font-size: 0.75rem;
        font-weight: 700;
        color: #6b7280;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        margin-bottom: 6px;
    }

    .status-badge {
        font-size: 0.875rem;
        font-weight: 700;
        padding: 6px 14px;
        border-radius: 20px;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        display: inline-flex;
        align-items: center;
    }

    .status-badge.active {
        background: #16a34a;
        color: white;
        box-shadow: 0 2px 4px rgba(22, 163, 74, 0.3);
    }

    .user-type {
        font-size: 1rem;
        font-weight: 600;
        color: #7c3aed;
        background: rgba(124, 58, 237, 0.1);
        padding: 6px 12px;
        border-radius: 8px;
        display: inline-block;
    }

    /* Informações Temporais */
    .temporal-info {
        display: grid;
        grid-template-columns: 1fr; /* Default to single column on small screens */
        gap: 16px;
    }



    .info-card {
        display: flex;
        align-items: center;
        gap: 14px;
        padding: 18px;
        background: #f8fafc;
        border-radius: 10px;
        border: 1px solid #e2e8f0;
        transition: all 0.2s ease;
    }

    .info-card:hover {
        background: #f1f5f9;
        border-color: #cbd5e1;
        transform: translateY(-1px);
    }

    .info-icon {
        width: 36px;
        height: 36px;
        background: #64748b;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        flex-shrink: 0;
    }

    .info-content {
        flex: 1;
    }

    .info-content label {
        display: block;
        font-size: 0.75rem;
        font-weight: 600;
        color: #64748b;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: 5px;
    }

    .info-content span {
        font-size: 0.9375rem;
        font-weight: 500;
        color: #1e293b;
    }

    .unavailable {
        color: #9ca3af !important;
        font-style: italic;
    }

    .datetime {
        font-family: 'Segoe UI', system-ui, monospace;
        font-variant-numeric: tabular-nums;
        font-weight: 600 !important;
        color: #059669 !important;
    }
</style>
@code {
    private bool showUserMenu = false;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private UserProfileModel? userProfile = null;
    private string userRole = string.Empty;
    
    private string userInitials => userProfile != null && !string.IsNullOrEmpty(userProfile.Name) 
        ? string.Join("", userProfile.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(n => n[0]).Take(2))
        : "U";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Verificar se há um usuário logado
            if (UserStateService.UserId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Buscar dados do usuário via API
            var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");

            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
                
                if (user != null)
                {
                    userProfile = new UserProfileModel
                    {
                        Id = user.Id,
                        Name = user.Nome ?? "Nome não disponível",
                        Email = user.Email ?? "Email não disponível",
                        Role = user.Cargo ?? "Utilizador",
                        PermissaoId = user.PermissaoId
                    };
                    userRole = user.Cargo ?? "Utilizador"; // Set the user role here
                    
                    Console.WriteLine($"Perfil carregado: {userProfile.Name} ({userProfile.Role})");
                }
                else
                {
                    errorMessage = "Dados do usuário não encontrados.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "Usuário não encontrado. Faça login novamente.";
                // Limpar estado e redirecionar para login
                UserStateService.UserId = Guid.Empty;
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = $"Erro ao carregar perfil: {response.StatusCode}";
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Erro de conexão com o servidor. Verifique sua conexão.";
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado ao carregar perfil.";
            Console.WriteLine($"Erro ao carregar perfil: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            "Utilizador" => "Utilizador",
            "GestorUtilizadores" => "Gestor de Utilizadores",
            "Administrador" => "Administrador",
            _ => role
        };
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task Logout()
    {
        // Limpar estado do usuário
        UserStateService.UserId = Guid.Empty;
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToChangePassword()
    {
        NavigationManager.NavigateTo("/profile/change-password");
    }

    public class UserProfileModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public Guid? PermissaoId { get; set; }
    }
}
