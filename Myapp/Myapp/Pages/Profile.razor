@page "/profile"
@using WebApplication5.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject UserStateService UserStateService

<div class="app-container">
    <!-- Sidebar Navigation -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Gestão Ativos</h2>
        </div>
        <nav class="sidebar-nav">
            <a href="/dashboard" class="nav-item">
                <div class="nav-icon dashboard-nav-icon"></div>
                <span>Dashboard</span>
            </a>
            <a href="/portfolio" class="nav-item">
                <div class="nav-icon portfolio-nav-icon"></div>
                <span>Carteira</span>
            </a>
            <a href="/transactions" class="nav-item">
                <div class="nav-icon transactions-nav-icon"></div>
                <span>Transações</span>
            </a>
            <a href="/reports" class="nav-item">
                <div class="nav-icon reports-nav-icon"></div>
                <span>Relatórios</span>
            </a>
        </nav>
        <div class="sidebar-footer">
            <a href="javascript:void(0)" @onclick="Logout" class="nav-item logout">
                <div class="nav-icon logout-nav-icon"></div>
                <span>Sair</span>
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner">
                    <p>Carregando perfil...</p>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-container">
                <div class="alert-error">
                    <span class="alert-icon">!</span>
                    <span>@errorMessage</span>
                </div>
                <button @onclick="LoadUserProfile" class="retry-button">Tentar Novamente</button>
            </div>
        }
        else if (userProfile != null)
        {
            <!-- Top Header with Breadcrumbs -->
            <div class="page-header">
                <div class="breadcrumbs">
                    <a href="/dashboard">Dashboard</a>
                    <span class="separator">/</span>
                    <span class="current">Meu Perfil</span>
                </div>
                <div class="user-profile">
                    <span class="user-greeting">Olá, <strong>@userProfile.Name</strong></span>
                    <button class="user-menu-button" @onclick="ToggleUserMenu">
                        <div class="avatar">@userInitials</div>
                        @if (showUserMenu)
                        {
                            <div class="user-menu">
                                <a href="/profile" class="user-menu-item">Meu Perfil</a>
                                <a href="javascript:void(0)" @onclick="Logout" class="user-menu-item logout">Sair</a>
                            </div>
                        }
                    </button>
                </div>
            </div>

            <!-- Page Title -->
            <div class="page-title-actions">
                <h1>Meu Perfil</h1>
            </div>

            <!-- Profile Overview -->
            <div class="profile-overview">
                <div class="profile-avatar">
                    <div class="avatar-large">@userInitials</div>
                </div>
                <div class="profile-info">
                    <h2>@userProfile.Name</h2>
                    <p class="profile-role">@GetRoleDisplayName(userProfile.Role)</p>
                    <p class="profile-member-since">ID: @userProfile.Id.ToString("N")[..8]...</p>
                </div>
            </div>

            <!-- Personal Information -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Informações Pessoais</h2>
                </div>
                <div class="personal-info">
                    <div class="info-group">
                        <label>Nome Completo</label>
                        <p>@userProfile.Name</p>
                    </div>
                    <div class="info-group">
                        <label>Email</label>
                        <p>@userProfile.Email</p>
                    </div>
                    <div class="info-group">
                        <label>Cargo</label>
                        <p>@GetRoleDisplayName(userProfile.Role)</p>
                    </div>
                    <div class="info-group">
                        <label>ID do Utilizador</label>
                        <p>@userProfile.Id</p>
                    </div>
                    @if (userProfile.PermissaoId.HasValue)
                    {
                        <div class="info-group">
                            <label>ID da Permissão</label>
                            <p>@userProfile.PermissaoId</p>
                        </div>
                    }
                </div>
                
                <!-- Security Section -->
                <div class="section-header">
                    <h2>Segurança</h2>
                    <button class="edit-button" @onclick="NavigateToChangePassword">
                        <span class="password-icon"></span>
                        Alterar Senha
                    </button>
                </div>
                <div class="security-info">
                    <p>A sua senha deve ser alterada regularmente para maior segurança.</p>
                    <p><strong>Importante:</strong> Mantenha suas credenciais seguras e não as compartilhe com terceiros.</p>
                    <p><strong>Última alteração:</strong> Informação não disponível</p>
                </div>
            </div>

            <!-- Account Information -->
            <div class="dashboard-section">
                <div class="section-header">
                    <h2>Informações da Conta</h2>
                </div>
                <div class="account-info">
                    <div class="info-row">
                        <div class="info-item">
                            <label>Status da Conta</label>
                            <span class="status-badge active">Ativa</span>
                        </div>
                        <div class="info-item">
                            <label>Tipo de Utilizador</label>
                            <span class="user-type">@GetRoleDisplayName(userProfile.Role)</span>
                        </div>
                    </div>
                    <div class="info-row">
                        <div class="info-item">
                            <label>Data de Criação</label>
                            <span>Informação não disponível</span>
                        </div>
                        <div class="info-item">
                            <label>Último Acesso</label>
                            <span>@DateTime.Now.ToString("dd/MM/yyyy HH:mm")</span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool showUserMenu = false;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private UserProfileModel? userProfile = null;
    
    private string userInitials => userProfile != null && !string.IsNullOrEmpty(userProfile.Name) 
        ? string.Join("", userProfile.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(n => n[0]).Take(2))
        : "U";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Verificar se há um usuário logado
            if (UserStateService.UserId == Guid.Empty)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Buscar dados do usuário via API
            var response = await Http.GetAsync($"http://localhost:5189/api/Utilizadore/{UserStateService.UserId}");

            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();
                
                if (user != null)
                {
                    userProfile = new UserProfileModel
                    {
                        Id = user.Id,
                        Name = user.Nome ?? "Nome não disponível",
                        Email = user.Email ?? "Email não disponível",
                        Role = user.Cargo ?? "Utilizador",
                        PermissaoId = user.PermissaoId
                    };
                    
                    Console.WriteLine($"Perfil carregado: {userProfile.Name} ({userProfile.Role})");
                }
                else
                {
                    errorMessage = "Dados do usuário não encontrados.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "Usuário não encontrado. Faça login novamente.";
                // Limpar estado e redirecionar para login
                UserStateService.UserId = Guid.Empty;
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = $"Erro ao carregar perfil: {response.StatusCode}";
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Erro de conexão com o servidor. Verifique sua conexão.";
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado ao carregar perfil.";
            Console.WriteLine($"Erro ao carregar perfil: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            "Utilizador" => "Utilizador",
            "GestorUtilizadores" => "Gestor de Utilizadores",
            "Administrador" => "Administrador",
            _ => role
        };
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task Logout()
    {
        // Limpar estado do usuário
        UserStateService.UserId = Guid.Empty;
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToChangePassword()
    {
        NavigationManager.NavigateTo("/profile/change-password");
    }

    public class UserProfileModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public Guid? PermissaoId { get; set; }
    }
}