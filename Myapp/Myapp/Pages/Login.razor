@page "/login"
@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text.Json
@using Microsoft.JSInterop
@using WebApplication5.DTO
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject UserStateService UserStateService

<div class="login-page">
    <div class="login-container">
        <div class="login-header">
            <h2>Gestor de Ativos</h2>
            <p>Entre com suas credenciais para acessar o sistema</p>
        </div>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-error">
                <span class="alert-icon">!</span>
                <span>@errorMessage</span>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert-success">
                <span class="alert-icon">✓</span>
                <span>@successMessage</span>
            </div>
        }
        
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="login-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="seu@email.com" disabled="@isLoading" />
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
            </div>
            
            <div class="form-group">
                <label for="password">Senha</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Digite sua senha" disabled="@isLoading" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>
            
            <div class="form-options">
                <a href="/register" class="forgot-password">Não tem conta? Registre-se</a>
            </div>
            
            <button type="submit" class="login-button" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Entrando...</span>
                }
                else
                {
                    <span>Entrar</span>
                }
            </button>
        </EditForm>
        
        <div class="login-footer">
            <p>&copy; @DateTime.Now.Year - Sistema de Gestão de Ativos</p>
        </div>
    </div>
</div>

<style>
    /* Mensagens de Alerta - Sucesso e Erro */
    .alert-success {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 1px solid #b8dabc;
        border-left: 4px solid #28a745;
        color: #155724;
        padding: 16px 20px;
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.15);
        display: flex;
        align-items: center;
    }

    .alert-error {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 1px solid #f1b0b7;
        border-left: 4px solid #dc3545;
        color: #721c24;
        padding: 16px 20px;
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.15);
        display: flex;
        align-items: center;
    }

    .alert-icon {
        font-size: 18px;
        font-weight: bold;
        margin-right: 12px;
        min-width: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        flex-shrink: 0;
    }

    .alert-success .alert-icon {
        background: rgba(40, 167, 69, 0.1);
        color: #28a745;
        border: 2px solid rgba(40, 167, 69, 0.2);
    }

    .alert-error .alert-icon {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border: 2px solid rgba(220, 53, 69, 0.2);
    }

    .alert-success span:not(.alert-icon),
    .alert-error span:not(.alert-icon) {
        font-weight: 500;
        font-size: 14px;
        line-height: 1.4;
        flex: 1;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isLoading = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                errorMessage = "Email e senha são obrigatórios.";
                return;
            }

            var loginRequest = new LoginRequest
            {
                Email = loginModel.Email.Trim().ToLowerInvariant(),
                Password = loginModel.Password
            };

            Console.WriteLine($"Tentando login com email: {loginRequest.Email}");

            var response = await Http.PostAsJsonAsync("http://localhost:5189/api/Utilizadore/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UtilizadoreDto>();

                if (user != null)
                {
                    Console.WriteLine($"Dados completos do usuário: {JsonSerializer.Serialize(user)}");

                    UserStateService.UserId = user.Id;
                    string redirectUrl = DetermineRedirectUrl(user.Cargo);
                    successMessage = $"Login realizado com sucesso! Redirecionando para {GetUserTypeDescription(user.Cargo)}...";

                    StateHasChanged();
                    loginModel = new LoginModel();
                    await Task.Delay(2000);
                    NavigationManager.NavigateTo(redirectUrl);
                }
                else
                {
                    errorMessage = "Erro ao processar dados do usuário.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro da API ({response.StatusCode}): {errorContent}");

                errorMessage = response.StatusCode switch
                {
                    HttpStatusCode.Unauthorized => "Email ou senha incorretos.",
                    HttpStatusCode.BadRequest => "Dados de login inválidos.",
                    HttpStatusCode.NotFound => "Usuário não encontrado.",
                    HttpStatusCode.InternalServerError => "Erro interno do servidor. Tente novamente mais tarde.",
                    _ => $"Erro ao tentar fazer login: {response.StatusCode}"
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado. Tente novamente.";
            Console.WriteLine($"Erro: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string DetermineRedirectUrl(string cargo)
    {
        var normalizedCargo = cargo?.Trim().ToLowerInvariant() ?? string.Empty;
        Console.WriteLine($"Cargo normalizado: {normalizedCargo}");

        return normalizedCargo switch
        {
            "utilizador" => "/main",
            "gestorutilizadores" => "/main",
            "administrador" => "/reports",
            _ => "/nao leu"
        };
    }

    private string GetUserTypeDescription(string cargo)
    {
        var normalizedCargo = cargo?.Trim().ToLowerInvariant() ?? string.Empty;
        return normalizedCargo switch
        {
            "utilizador" => "dashboard do utilizador",
            "gestorutilizadores" => "dashboard do gestor",
            "administrador" => "página de relatórios",
            _ => "dashboard"
        };
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email é obrigatório")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        [StringLength(150, ErrorMessage = "O email não pode ter mais de 150 caracteres.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Senha é obrigatória")]
        [StringLength(100, ErrorMessage = "A senha deve ter entre {2} e {1} caracteres.", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginRequest
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
